[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "HandsOnEx/HandsOnEx01/HandsOnEx01.html",
    "href": "HandsOnEx/HandsOnEx01/HandsOnEx01.html",
    "title": "HandsOnEx01",
    "section": "",
    "text": "pacman::p_load(tidyverse)\n\nImporting the data"
  },
  {
    "objectID": "InClassEx/InClassEx03/InClassEx03.html",
    "href": "InClassEx/InClassEx03/InClassEx03.html",
    "title": "InClassEx03",
    "section": "",
    "text": "Installing and loading R Packages\nTwo packages will be installed and loaded. they are: tidyverse and ggiraph.\n\npacman::p_load(ggiraph, tidyverse)\n\nimporting data\n\nexam_data <- read_csv('data/Exam_data.csv')\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)"
  },
  {
    "objectID": "InClassEx/InClassEx04/InClassEx04.html",
    "href": "InClassEx/InClassEx04/InClassEx04.html",
    "title": "In Class Exercise 04",
    "section": "",
    "text": "Load the required packages.\n\n\nShow the code\npacman::p_load(tidyverse, DT, patchwork, plotly, ggstatsplot)\n\n\nLoad the Data Set\n\n\nShow the code\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\n\n\n\nShow the code\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\np <- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(dotsize = 1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggbetweenstats(\n  data = exam_data,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\nShow the code\nggscatterstats(\n  data = exam_data,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = TRUE,\n  )"
  },
  {
    "objectID": "InClassEx/InClassEx04/InClassEx04.html#visualising-models",
    "href": "InClassEx/InClassEx04/InClassEx04.html#visualising-models",
    "title": "In Class Exercise 04",
    "section": "Visualising Models",
    "text": "Visualising Models\n\nImporting and preparing the Data Set\n\nloading packages\n\n\nShow the code\npacman::p_load(readxl, performance, parameters, see, gtsummary)\n\n\n\n\nLoad the Data Set\n\n\nShow the code\ncar_resale <- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\n\n\n\n\n\nMultiple Regression Model using lm()\n\n\nShow the code\nmodel <- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\nModel Diagnostic: checking for multicolinearity:\n\n\nShow the code\ncheck_c <- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\n\nModel Diagnostic: checking normality assumption\n\n\nShow the code\nmodel1 <- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\n\n\nShow the code\ncheck_n <- check_normality(model1)\n\n\n\n\nShow the code\nplot(check_n)\n\n\n\n\n\n\n\nVisualizing the uncertainty of point estimates: ggplot2 methods\n\n\nShow the code\nmy_sum <- exam_data %>%\n  group_by(RACE) %>%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %>%\n  mutate(se=sd/sqrt(n-1))\n\n\ndrawing\n\n\nShow the code\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes \n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean \n          maths score by rac\")"
  },
  {
    "objectID": "InClassEx/InClassEx05/InClassEx05.html",
    "href": "InClassEx/InClassEx05/InClassEx05.html",
    "title": "In Class Exercise 05",
    "section": "",
    "text": "Show the code\npacman::p_load(corrplot, ggstatsplot, plotly, seriation, dendextend, heatmaply, tidyverse)"
  },
  {
    "objectID": "InClassEx/InClassEx05/InClassEx05.html#visualising-correlation-matrix",
    "href": "InClassEx/InClassEx05/InClassEx05.html#visualising-correlation-matrix",
    "title": "In Class Exercise 05",
    "section": "Visualising Correlation Matrix",
    "text": "Visualising Correlation Matrix\n\nImporting Data Set\n\n\nShow the code\nwine <- read_csv(\"data/wine_quality.csv\")\n\n\n\n\nBuilding correlation matrix (basic)\n\n\nShow the code\npairs(wine[,1:11])\n\n\n\n\n\n\n\nBuilding correlation matrix (ggcormat)\n\n\nShow the code\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n\n\n\n\n\n\n\nBuilding correlation matrix (corrplot)\n\n\nShow the code\nwine.cor <- cor(wine[, 1:11])\n\ncorrplot(wine.cor)"
  },
  {
    "objectID": "InClassEx/InClassEx05/InClassEx05.html#visualising-tenary-plots",
    "href": "InClassEx/InClassEx05/InClassEx05.html#visualising-tenary-plots",
    "title": "In Class Exercise 05",
    "section": "Visualising Tenary Plots",
    "text": "Visualising Tenary Plots\n\n\n\n\n\n\nWarning\n\n\n\nThe tenary package currently conflicts with ggstatsplot\n\n\n\nImporting Data Set\n\n\nShow the code\n# pop_data <- read_csv(\"data/respopagsex2000to2018_tidy.csv\") \n\n\n\n\nPreparing the data\n\n\nShow the code\n# agpop_mutated <- pop_data %>%\n#   mutate(`Year` = as.character(Year))%>%\n#   spread(AG, Population) %>%\n#   mutate(YOUNG = rowSums(.[4:8]))%>%\n#   mutate(ACTIVE = rowSums(.[9:16]))  %>%\n#   mutate(OLD = rowSums(.[17:21])) %>%\n#   mutate(TOTAL = rowSums(.[22:24])) %>%\n#   filter(Year == 2018)%>%\n#   filter(TOTAL > 0)\n\n\n\n\nPlotting a static ternary diagram\n\n\nShow the code\n# ggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n#   geom_point()\n\n\nAdding some visual elements to the tenary diagrams\n\n\nShow the code\n# ggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n#   geom_point() +\n#   labs(title=\"Population structure, 2015\") +\n#   theme_rgbw()\n\n\n\n\nPlotting an Interactive tenary Diagram\n\n\nShow the code\n# label <- function(txt) {\n#   list(\n#     text = txt, \n#     x = 0.1, y = 1,\n#     ax = 0, ay = 0,\n#     xref = \"paper\", yref = \"paper\", \n#     align = \"center\",\n#     font = list(family = \"serif\", size = 15, color = \"white\"),\n#     bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n#   )\n# }\n# \n# axis <- function(txt) {\n#   list(\n#     title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n#   )\n# }\n# \n# ternaryAxes <- list(\n#   aaxis = axis(\"Young\"), \n#   baxis = axis(\"Active\"), \n#   caxis = axis(\"Old\")\n# )\n# \n# plot_ly(\n#   agpop_mutated, \n#   a = ~YOUNG, \n#   b = ~ACTIVE, \n#   c = ~OLD, \n#   color = I(\"black\"), \n#   type = \"scatterternary\"\n# ) %>%\n#   layout(\n#     annotations = label(\"Ternary Markers\"), \n#     ternary = ternaryAxes\n#   )"
  },
  {
    "objectID": "InClassEx/InClassEx05/InClassEx05.html#visualising-heat-maps",
    "href": "InClassEx/InClassEx05/InClassEx05.html#visualising-heat-maps",
    "title": "In Class Exercise 05",
    "section": "Visualising Heat Maps",
    "text": "Visualising Heat Maps\n\nImporting the data\n\n\nShow the code\nwh <- read_csv(\"data/WHData-2018.csv\")\n\n\n\n\nPreparing the data\nthis code sets the country names as the index. it is needed because heatmaps uses the index to display the rows and columns\n\n\nShow the code\nrow.names(wh) <- wh$Country\n\n\n\n\nTransforming into matrix\nseems like heatmaps require data in matrix\n\n\nShow the code\nwh1 <- dplyr::select(wh, c(3, 7:12))\nwh_matrix <- data.matrix(wh)\n\n\nBuilding the basic Heatmap\n\n\nShow the code\nwh_heatmap <- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\n\nBuilding Heatmap using heatmaply\n\n\nShow the code\nheatmaply(wh_matrix)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608",
    "section": "",
    "text": "Main page Placeholder"
  },
  {
    "objectID": "TakeHomeEx/TakeHomeEx01/TakeHomeEx01.html",
    "href": "TakeHomeEx/TakeHomeEx01/TakeHomeEx01.html",
    "title": "TakeHomeEx01",
    "section": "",
    "text": "Age-sex pyramid is an analytical visualisation commonly used by demographers to reveal the structure of population by gender and age group. In this take-home exercise, you are required to reveal the demographic structure of Singapore at planning area level by using age-sex pyramid method. Instead of plotting a single age-sex pyramid, however, you are required to display nine selected planning areas on a single view by using trellis display (also know as small-multiple plot).\n\n\n\nTableau Prep Builder version 2022.4: Used for data cleaning to removed unnecessary fields and filtering of relevant fields\nTableau version 2022.4\n\n\n\n\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2022 should be used to prepare the analytical visualisation. It is available at Department of Statistics, Singapore(in short SingStat).\n\n\n\n\nThe analytical visualisation would be uploaded onto Tableau Public.\nA write-up of the take-home exercise would be prepared in Quarto html document format and published on Netlify."
  },
  {
    "objectID": "TakeHomeEx/TakeHomeEx01/TakeHomeEx01.html#cleaning-the-data",
    "href": "TakeHomeEx/TakeHomeEx01/TakeHomeEx01.html#cleaning-the-data",
    "title": "TakeHomeEx01",
    "section": "Cleaning the data",
    "text": "Cleaning the data\n\nImporting the data\nOpen up the downloaded dataset in Tableau Prep Builder by dragging the file into the Tableau Prep Builder.\n\n\n\nCleaning up the data\nAs we are only interested in the Planning Zone (PZ), we will uncheck the SZ box. Since the whole dataset is for the year 2022, the field, Time is also irrelevant, so we will also uncheck that.\n\n\n\n\n\nCreating new fields\nTableau is unable to sort the Male and Females into two columns as per an Age-Sex Pyramid, hence we would need to create 2 more values for the male and female population respectively and display them separately in Tableau later.\nRight click on \"Sex\" column > select \"Calculated Field\" > \"Custom Calculation\n\nIn the dialog box that pops up, key in\nIF [Sex] = 'Males' THEN [Pop] END\n\nRepeat the same process for Females\n\nWe also see that the Age Group consists of underscores as shown below, we will use “edit field” to replace the “_” with spaces instead. Use the following code:\nReplace([AG],'_',' ')\n\nThere are also some Planning Areas with 0 population, like in Jurong East, Water Catchment areas. These areas would be irrelevant as we want to show the Age-Sex Pyramid for PAs in Singapore. we would now remove those 0 values by using the filter function in Tableau Prep Builder.\nRight Click on Pop > \"Select Filter\" > Select \"Selcted Values\"\n\nSelect \"Exclude\" > Check \"0\"\n\n\n\nExporting out from Tableau Prep Builder\nWe are now ready to export the cleaned data from Tableau Prep Builder and start on the visualisation in Tableau.\nClick the + icon next to the dataset and select output\n\nClick on the play button to create and export the file"
  },
  {
    "objectID": "TakeHomeEx/TakeHomeEx01/TakeHomeEx01.html#visualising-the-data",
    "href": "TakeHomeEx/TakeHomeEx01/TakeHomeEx01.html#visualising-the-data",
    "title": "TakeHomeEx01",
    "section": "Visualising the data",
    "text": "Visualising the data\nWe will now carry out the visualisation in Tableau. First, we will open the file that was exported from the Tableau Prep Builder just now. It is a “Tableau Hyper” file. Just drag and drop the file into the Tableau window.\n\nIf everything goes well, we will now see the following view.\n\n\nCreating a Trellis Layout\nIn order to create a Trellis Layout, we would need to create two Calculated Fields, “Row” and “Column”. This will tell Tableau how many Rows and Columns to visualse the data.\nClick on the small triangle in the Data Box and select \"Create Calculated Field\" from the drop down box\n\nCreate the following two fields\n\n\nAfter this is done, drag Column, Row, Age Group, Male Population and Female Population into the shelf as shown below\n\n\n\nCreating the population visualisaion\nHowever this doesn’t look quite correct. The reason is because the rows and columns are not calculating based on the Planning Area. to resolve this, we need to drag the PA into the Marks Box and set Rows and Columns to calculate based on PA.\nDrag PA into Marks Box\nclick on small triangle for Columns > select Compute using >select PA\nRepeat for Rows\n\nWe should now end up with the following view. This doesn’t look like an Age-Sex Pyramid yet. We need to set the male x axis to reserve and change the colur.\n\nRight Click X axis, Male Population and select \"Edit Axis\"\n\nCheck \"Reversed\"\n\nThe chart is shaping up to look like an Age-Sex Pyramid now. let’s change the colour to make it clearer.\nDrag \"Sex\"  into \"Color\" under the Marks Box\nWe now have the basic visualisation for an Age -Sex Pyramid organised into a Trellis Displpay.\n\n\n\nAdding Labels\nThe chart is a bit hard to read. we should add lables showing the population numbers for the Male and Female Populations.\nClick Labels under Marks Box > Check \"Show mark labels\"\n\nTableau will automatically select a colour to contrast the lables, however it does not zalways work correct due to different display resolutions. If the text is a bit harder to read on your display. we can change the colours for the sex.\nclick on the small triangle in the legend on the right hand side > select \"edit Colours\" and choose whateever colour u want.\n\n\n\n\n\nThe Age-Sex pyramid now shows the gender and population numbers clearly by Age-group, but is still missing the PA name.\n\n\nLabeling each box of a Trellis Display in Tableau\nLabeling Trellis display boxes can be tricky. there is no straightforward way to do it in Tableau. the correct way to do it would be to use a dual axis chart. we would create a new axis and stack it with our existing chart for labeling purpose. First, we create a new axis called “Window Max”. this is done via “create calculated field” again.\n\nNext, we create another table called PA Label which will hold the label data\n\nWe will now drag the “Windows Max” dimension on top of the Male Column as shown below\n\nThe Shelf should now look like this\n\nWe now drag the PA Label onto the text box under “Windows Max” in Marks Box\n\nThe final product would now look like this.\n\nWe can now tidy the formatting by hiding unwanted headers, adding banding and adjusting the fonts to make the chart more readable before moving on to creating a dashboard"
  },
  {
    "objectID": "TakeHomeEx/TakeHomeEx01/TakeHomeEx01.html#creating-a-dashboard",
    "href": "TakeHomeEx/TakeHomeEx01/TakeHomeEx01.html#creating-a-dashboard",
    "title": "TakeHomeEx01",
    "section": "Creating a Dashboard",
    "text": "Creating a Dashboard\nFirst, we set the desired size. i chose “Automatic” however tableau has a wide range fo options to choose from, depending on where you are intending to show the visualisation.\n\nNext, we drag the Age Sex Pyramid into the blank dashboard\n\nIt look fine, but we should create a proper header to inform people what the chart is about. we drag the “Text” Object to the top of the dashboard to create the header\n\nFinally it should look like this"
  },
  {
    "objectID": "TakeHomeEx/TakeHomeEx01/TakeHomeEx01.html#discussion",
    "href": "TakeHomeEx/TakeHomeEx01/TakeHomeEx01.html#discussion",
    "title": "TakeHomeEx01",
    "section": "Discussion",
    "text": "Discussion\nA population pyramid (age structure diagram) or “age-sex pyramid” is a graphical illustration of the distribution of a population by age groups and sex and is often used to determine the overall age distribution of a population and an indication of the reproductive capabilities. There are generally three types of population pyramid.\n\n\n\n\n\n\n\nTrend (Shape)\nCharacteristics\n\n\n\n\nExpansive (Pyramid)\nHigh Birthrates and perhaps high mortality rates. The population is replacing faster than it is dying\n\n\nConstrictive (Square or inverted pyramid)\nPopulation is living longer, but low birth rates. population is not replacing as fast as it’s dying.\n\n\nStationary (Pillar)\nBirthrates and Mortality rates roughly balance each other.\n\n\n\nWhile Age-sex Pyramids are often used to determine if a country’s population is replacing itself fast enough, it may not be useful to analyse the PA break down in this manner, as it is very common for Singaporean’s to move to another area once they reach certain life milestones. for example, when getting married, when their children reach primary school age, and when they reach retirement age. It might be more insightful to cross reference the age-sex pyramid with the age of the PA (mature / non mature estates). What the pyramids do tell us right now is the breakdown of the age groups in each planning area. this can be relevant for city planners to plan for age appropiate amenities in each PA. for example elderly care facilities in PAs with more elderly and schools in younger PA.\nSpecific to the 9 most populated areas in Singgapore, we can observe that the population replacement rate is not replacing fast enough, with a constrictive trend in Woodlands, Choa Chu Kang, Hougang, Sengkang, Yishun and Tampines, Bedok and Jurong West presents a nearly inverted inverted pyramid. only Punggol looks like it has an Expansive trend. It is also interesting to note across all the planning areas have a large number of population difference in the 30s range. This could be due to Singaporeans getting married and moving in to this areas. as this coincides with the average Singaporean Age to get married."
  },
  {
    "objectID": "TakeHomeEx/TakeHomeEx02/TakeHomeEx02.html",
    "href": "TakeHomeEx/TakeHomeEx02/TakeHomeEx02.html",
    "title": "Take Home Exercise 02 - Critque of Age-Sex Visualisation and Remake in ‘R’",
    "section": "",
    "text": "The Take Home Exercise consists of 2 main tasks:\n\nSelect and critique the Tableau Visualisation from one classmate based on the concepts of clarity and aesthetics covered in class.\nRemake the original design by using ggplot2, ggplot2 extensions and tidyverse packages."
  },
  {
    "objectID": "TakeHomeEx/TakeHomeEx02/TakeHomeEx02.html#visualisation-critique",
    "href": "TakeHomeEx/TakeHomeEx02/TakeHomeEx02.html#visualisation-critique",
    "title": "Take Home Exercise 02 - Critque of Age-Sex Visualisation and Remake in ‘R’",
    "section": "Visualisation Critique",
    "text": "Visualisation Critique\nThe following Tableau Visualisation was selected. Observations are highlighted with a box and corresponding serial indicators for reference to the detailed comments below\n\n\nClarity\n(a) Lack of details in title. The title does not tell me what the graph is trying to show, which country or area it is for and is also naming the graph type wrongly. A possible title could have been:\n\n\n\n\n\n\nNote\n\n\n\nAge-Sex Pyramid for Singapore\nTop 9 most populated planning area - June 2022\n\n\n(b) Bins are too large. To be fair, it’s not totally wrong to use a bin of 10 years, however this choice coupled with the choice of layout (elaborated below under Aesthetic) makes the Age-Sex Pyramid too “flat” and difficult to visually interpret the age-sex patterns.\n(c) Irrelevant data. An average of the population in various age group was shown for the males and females in each Planning Area respectively. this information is not relevant to identifying the patterns from Age-Sex Pyramids and furthermore does not provide further insights for actions and planning.\n(d) Irrelevant visualisation. A box plot was overlaid over the age sex pyramid. Similiar to the above point, it does not help with interpretation and runs the risk of making the graph more messy. the boxplot itself also does not serve it’s own purpose because we are unable to check the details on the limits of the boxplots\n(e) Irrelevant reference line. A reference line was drawn from y-axis somewhere between 11k and 12k population. This reference line serves no purpose. There was no description on what the line is supposed to indicate or tell the reader.\n\n\n\n\n\n\nTip\n\n\n\nWhatever doesn’t add; Subtracts\n\n\n\n\nAesthetics\n(a) Overly wide layout. The choice of layout (1 chart wide) is too wide, causing the Age-Sex Pyramid to be stretched out, making it ugly and difficult to interpret.\n(b) Unclear segregation between axis and graph area. There is currently no segreation between the graph area and the axis. it would be a good idea to give the axis another colour (e.g. Light Grey) so that it’s easier and mroe pleasant to read. The brain would not need to work extra to figure out where the graph and the axis cuts.\n(c) Unclear segregation between axis and graph area. Similar to the previous point, the segregation between the axis and the graph area is not clear. recommended to give the axis another colour."
  },
  {
    "objectID": "TakeHomeEx/TakeHomeEx02/TakeHomeEx02.html#remake-of-the-visualistion-in-r-using-ggplot2",
    "href": "TakeHomeEx/TakeHomeEx02/TakeHomeEx02.html#remake-of-the-visualistion-in-r-using-ggplot2",
    "title": "Take Home Exercise 02 - Critque of Age-Sex Visualisation and Remake in ‘R’",
    "section": "Remake of the visualistion in ‘R’ using ggplot2",
    "text": "Remake of the visualistion in ‘R’ using ggplot2\n\nTools used\n\nR Binaries 4.2.2 on Windows 11 Professional\nRStudio 2022.12.0 build 353 on Windows 11 Professional (RStudio has been renamed as Posit)\n\n\n\nLibraries\nThe R packages we’ll use for this analysis are:\n\ntidyverse - a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\nggplot2 - a system for declaratively creating graphics, based on The Grammar of Graphics (ggplot2 is included in the tidyverse package, i’m highlighting it here for emphasis, since it’s our main tool for visualisation)\nggthemes - The ggthemes package provides extra themes, geoms, and scales for the ggplot2 package\nggiraph - a package that provides interactive elements to ggplot like animations and tooltips (was not used after experimenting with it, leaving it here for reference)\nplotly - another package that provides interactive elements to ggplot (was not used after experimenting with it, leaving it here for reference)\n\n\n\nData Used\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2022 should be used to prepare the analytical visualisation. It is available at Department of Statistics, Singapore(in short SingStat).\n\n\nImporting and preparing the Data Set\n\nloading packages\nWe first load the required packages.\n\n\n\n\n\n\nNote\n\n\n\nggplot2 is already included in tidyverse, hence there is no need to load it seperately\n\n\n\n\nShow the code\npacman::p_load(tidyverse, ggthemes, ggiraph, plotly)\n\n\n\n\nImporting and tidying the data\nThe data set was first imported using the read_csv() function.\n\n\nShow the code\nsg <- read_csv('data/respopagesextod2022.csv')\n\n\nAfter importing, we use str() to check the contents of the data set and see if anything needs to be corrected\n\n\nShow the code\nstr(sg)\n\n\nspc_tbl_ [100,928 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ PA  : chr [1:100928] \"Ang Mo Kio\" \"Ang Mo Kio\" \"Ang Mo Kio\" \"Ang Mo Kio\" ...\n $ SZ  : chr [1:100928] \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" ...\n $ AG  : chr [1:100928] \"0_to_4\" \"0_to_4\" \"0_to_4\" \"0_to_4\" ...\n $ Sex : chr [1:100928] \"Males\" \"Males\" \"Males\" \"Males\" ...\n $ TOD : chr [1:100928] \"HDB 1- and 2-Room Flats\" \"HDB 3-Room Flats\" \"HDB 4-Room Flats\" \"HDB 5-Room and Executive Flats\" ...\n $ Pop : num [1:100928] 0 10 10 30 0 50 0 0 0 0 ...\n $ Time: num [1:100928] 2022 2022 2022 2022 2022 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   PA = col_character(),\n  ..   SZ = col_character(),\n  ..   AG = col_character(),\n  ..   Sex = col_character(),\n  ..   TOD = col_character(),\n  ..   Pop = col_double(),\n  ..   Time = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n\n\nWe noticed that the data set contains more data than we require for this exercise hence we will remove them using the select() function to only take what we need. We also take the opportunity to change the names to their full form to make them easier to understand with names()\n\n\n\n\n\n\nNote\n\n\n\nselect() choose columns from a data set\n\n\n\n\nShow the code\nsgsubset <- sg %>% select(PA, AG, Sex, Pop)\nnames(sgsubset) <-c('Planning_Area', 'Age_group', 'Gender', 'Population')\n\n\nLet’s now check how the Age_group is binned. it is common for them not to be in the correct logical order if they are sorted alphabetically.\n\n\nShow the code\nlevels(factor(sgsubset$Age_group))\n\n\n [1] \"0_to_4\"      \"10_to_14\"    \"15_to_19\"    \"20_to_24\"    \"25_to_29\"   \n [6] \"30_to_34\"    \"35_to_39\"    \"40_to_44\"    \"45_to_49\"    \"5_to_9\"     \n[11] \"50_to_54\"    \"55_to_59\"    \"60_to_64\"    \"65_to_69\"    \"70_to_74\"   \n[16] \"75_to_79\"    \"80_to_84\"    \"85_to_89\"    \"90_and_over\"\n\n\nIndeed, the age group, “5_to_9” is out of place. let’s use mutate() and arrange() to correct this.\n\n\nShow the code\norder <- c(\"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\", \"25_to_29\", \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\", \"50_to_54\", \"55_to_59\", \"60_to_64\", \"65_to_69\", \"70_to_74\", \"75_to_79\", \"80_to_84\", \"85_to_89\", \"90_and_over\")\n\nsgsubset <- sgsubset %>%\n  mutate(Age_group =  factor(Age_group, levels = order)) %>%\n  arrange(Age_group)\n\nlevels(sgsubset$Age_group)\n\n\n [1] \"0_to_4\"      \"5_to_9\"      \"10_to_14\"    \"15_to_19\"    \"20_to_24\"   \n [6] \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"    \"45_to_49\"   \n[11] \"50_to_54\"    \"55_to_59\"    \"60_to_64\"    \"65_to_69\"    \"70_to_74\"   \n[16] \"75_to_79\"    \"80_to_84\"    \"85_to_89\"    \"90_and_over\"\n\n\nNow the data set is tidied and ready for further preparation before visualisation.\n\n\nPreparing the data for visualisation\nThis exercise only requires us to show the Age-Sex Pyramid for 9 selected planning areas in Singapore. we will choose the top 9 by planning areas by total population. first we would need to find out which are the 9 most populous planning areas with the following code chunk.\n\n\nShow the code\nCheck_PA <- sgsubset %>%\n  group_by(`Planning_Area`) %>%\n  summarise(sum_pop = sum(Population), .groups = 'drop') %>%\n  arrange(sum_pop,.by_group = TRUE) %>%\n  top_n(9) %>%\n  ungroup()\n\nCheck_PA\n\n\n# A tibble: 9 × 2\n  Planning_Area sum_pop\n  <chr>           <dbl>\n1 Punggol        186270\n2 Choa Chu Kang  190330\n3 Yishun         222960\n4 Hougang        227540\n5 Woodlands      252510\n6 Sengkang       253120\n7 Jurong West    258540\n8 Tampines       265690\n9 Bedok          278640\n\n\nWe can see that the 9 most populous planning areas are, ‘Bedok’, ‘Tampines’, ‘Jurong West’, ‘Sengkang’, ‘Woodlands’, ‘Hougang’, ‘Yishun’, ‘Choa Chu Kang’, ‘Punggol’. we will now use filter() to only select those rows of data that belongs to these planning areas.\n\n\n\n\n\n\nNote\n\n\n\nFilter() chooses rows from a data set\n\n\n\n\nShow the code\nsgsubsettop9 <- sgsubset %>% filter(`Planning_Area` %in% c('Bedok', 'Tampines', 'Jurong West', 'Sengkang', 'Woodlands', 'Hougang', 'Yishun', 'Choa Chu Kang', 'Punggol'))\n\n\nWe now have everything we need to visualise the data.\n\n\n\nVisualising the Age-Sex Pyramid in a Trellis Display\nThe first thing to do when we want to visualise anything in ‘R’ with ggplot is to define a ggplot object. The ggplot object consists of a few layers, ‘Data’, ‘Aesthetics’, ‘Geometrics’, ‘Facets’, ‘Statistics’ ‘Coordinate Systems’ and ‘Themes’. The first 3 layers are the most important.\nIn the code hunk below, we set the ‘data’ to sgsubsettop9 and specify which columns to use, then specify what ‘geometrics’ to use, before usiing coord flip to turn the bar horizonal() and facet_warp() to show the 9 planning areas in a trellis display.\n\nDefining ggplot object\n\n\n\n\n\n\nImportant\n\n\n\nFor an Age-Sex pyramid, it is important to flip one of the gender to the left side of 0 by making the values negative.\n\n\n\n\nShow the code\nagesexP <- ggplot(sgsubsettop9,aes(x = `Age_group`, y = Population,fill = Gender)) + \n  geom_bar(data = subset(sgsubsettop9,Gender == 'Females'), stat = 'identity') + \n  geom_bar(data = subset(sgsubsettop9,Gender == 'Males'), stat = 'identity', mapping = aes(y = -(Population))) + \n  coord_flip() + \n  facet_wrap(~`Planning_Area`,ncol = 3)\n\n#i can't get the custom y scales to work with facet_warp, preserving the code here in case i learn the fix to this. this was originally intended to minimise the zeros, making it easier to read in intervals of '50 thousands'\n#   scale_y_continuous(breaks = seq(-150000, 150000, 50000),\n#                      labels = paste0(as.character(c(seq(150, 0, -50), seq(50, 150, 50)))))\n\n\nAfter the ggplot object has been created, we now try to beautify the plot by adding themes via ggthemes as well as giving it proper titles and labels\n\n\nBeautifying and drawing the visualisation\n\n\n\n\n\n\nNote\n\n\n\nThe default quarto figure size for code output is too small, we will use the RMarkdown commands, fig-height and fig-width to adjust the figure size\n\n\n\n\nShow the code\nagesexP +\n  ggtitle(\"Singapore Age-Sex Pyramid (top 9 populous Planning Area) - June 2022\") + \n  theme_economist() +\n  theme(plot.title = element_text(hjust = 0.5, vjust = 3)) + \n  xlab(\"Age Group\") + \n  ylab(\"Population\")+\n  scale_fill_manual(values=c('lightpink2','steelblue3'))\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nI experimented with ggplotly and ggiraph but can’t get the interactive elements and scales to show up correctly together with the other facets and themes.\n\n\n\n\n\nComparisons between using Tableau and ‘R’\nTableau provides a visual and convenient way to create presentation ready visualisations without any coding knowledge. This makes tableau much more accessible to the general public and comapnies.\nOn the other hand, visualisations in ‘R’ can achieve the same if not better visualisation that Tableau with much more granular control over the various attributes and objects shown. However the caveat is that coding knowledge is required and some of the packages may not always work well with each other without more extensive research. for example, i was unable to get the ggthemes package to work with ggiraph and plotly. i also faced problems in getting scale_y_continuous() to work with facet_wrap().\nIn the end, which tool to use will probably end up being determined by an individual’s proficiency with either tools."
  },
  {
    "objectID": "InClassEx/InClassEx05/InClassEx05.html#loading-packages",
    "href": "InClassEx/InClassEx05/InClassEx05.html#loading-packages",
    "title": "ISSS 608 Project Proposal",
    "section": "Loading Packages",
    "text": "Loading Packages\n\npacman::p_load(corrplot, ggstatsplot, plotly, seriation, dendextend, heatmaply, tidyverse)"
  },
  {
    "objectID": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html",
    "href": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html",
    "title": "Take Home Exercise 03 - Putting Visual Analytics into Practical Use",
    "section": "",
    "text": "The task for this take home exercise is to uncover the salient patterns of the resale prices of public housing property by residential towns and estates in Singapore using appropriate analytical visualisation techniques learned in Lesson 4: Fundamentals of Visual Analytics.\nFor the purpose of this study, the focus should be on 3-ROOM, 4-ROOM and 5-ROOM types. We can choose to focus on either one housing type or multiple housing types. The study period should be on 2022.\nThe write-up of the take-home exercise should include but not limited to the followings:\n\nDescribe the selection and designed consideration of the analytical data visualisation used. The discussion should limit to not more than 150 words each.\nA reproducible description of the procedures used to prepare the analytical visualisation. Please refer to the peer submission I shared.\nA write-up of not more than 100 words to discuss the patterns reveal by each analytical visualisation prepared."
  },
  {
    "objectID": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#remake-of-the-visualistion-in-r-using-ggplot2",
    "href": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#remake-of-the-visualistion-in-r-using-ggplot2",
    "title": "Take Home Exercise 03 - Putting Visual Analytics into Practical Use",
    "section": "Remake of the visualistion in ‘R’ using ggplot2",
    "text": "Remake of the visualistion in ‘R’ using ggplot2\n\nTools used\n\nR Binaries 4.2.2 on Windows 11 Professional\nRStudio 2022.12.0 build 353 on Windows 11 Professional (RStudio has been renamed as Posit)\n\n\n\nLibraries\nThe R packages we’ll use for this analysis are:\n\ntidyverse - a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\nggplot2 - a system for declaratively creating graphics, based on The Grammar of Graphics (ggplot2 is included in the tidyverse package, i’m highlighting it here for emphasis, since it’s our main tool for visualisation)\nggthemes - The ggthemes package provides extra themes, geoms, and scales for the ggplot2 package\nggiraph - a package that provides interactive elements to ggplot like animations and tooltips (was not used after experimenting with it, leaving it here for reference)\nplotly - another package that provides interactive elements to ggplot (was not used after experimenting with it, leaving it here for reference)\n\n\n\nData Used\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2022 should be used to prepare the analytical visualisation. It is available at Department of Statistics, Singapore(in short SingStat).\n\n\nImporting and preparing the Data Set\n\nloading packages\nWe first load the required packages.\n\n\nShow the code\npacman::p_load(tidyverse)\n\n\nLoading the dataset\nThe data has 147601 rows and 11 columns.\n\n\n\n\nOverview3-Room4-Room5-Room\n\n\nHi\n\n\nHi\n\n\nHi\n\n\nHi"
  },
  {
    "objectID": "InClassEx/InClassEx06/Hands-on_Ex06-VisTime.html",
    "href": "InClassEx/InClassEx06/Hands-on_Ex06-VisTime.html",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "",
    "text": "By the end of this hands-on exercise you will be able create the followings data visualisation by using R packages:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a horizon chart"
  },
  {
    "objectID": "InClassEx/InClassEx06/Hands-on_Ex06-VisTime.html#getting-started",
    "href": "InClassEx/InClassEx06/Hands-on_Ex06-VisTime.html#getting-started",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Getting Started",
    "text": "Getting Started\n::: callout-info ## Do It Yourself Write a code chunk to check, install and launch the following R packages: scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table and tidyverse.\n\n\nShow the code\npacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, tidyverse, readxl, knitr, data.table)"
  },
  {
    "objectID": "InClassEx/InClassEx06/Hands-on_Ex06-VisTime.html#plotting-calendar-heatmap",
    "href": "InClassEx/InClassEx06/Hands-on_Ex06-VisTime.html#plotting-calendar-heatmap",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Plotting Calendar Heatmap",
    "text": "Plotting Calendar Heatmap\nIn this section, you will learn how to plot a calender heatmap programmetically by using ggplot2 package.\n\nBy the end of this section, you will be able to:\n\nplot a calender heatmap by using ggplot2 functions and extension,\nto write function using R programming,\nto derive specific date and time related field by using base R and lubridate packages\nto perform data preparation task by using tidyr and dplyr packages.\n\n\nThe Data\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n\nImporting the data\nFirst, you will use the code chunk below to import eventlog.csv file into R environment and called the data frame as attacks.\n\nattacks <- read_csv(\"data/eventlog.csv\")\n\n\n\nExamining the data structure\nIt is always a good practice to examine the imported data frame before further analysis is performed.\nFor example, kable() can be used to review the structure of the imported data frame.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, namely timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\n\ntz field stores time zone of the source IP address.\n\n\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\n\n\nData Preparation\nStep 1: Deriving weekday and hour of day fields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task.\n\nmake_hr_wkday <- function(ts, sc, tz) {\n  real_times <- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt <- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\nNote: ymd_hms() and hour() are from lubridate package and weekdays() is a base R function.\nStep 2: Deriving the attacks tibble data frame\n\nwkday_levels <- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks <- attacks %>%\n  group_by(tz) %>%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %>% \n  ungroup() %>% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\nNote: Beside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting\nTable below shows the tidy tibble table after processing.\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11\n\n\n\n\n\n\n\nBuilding the Calendar Heatmaps\n\ngrouped <- attacks %>% \n  count(wkday, hour) %>% \n  ungroup() %>%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\nThings to learn from the code chunk: - a tibble data table called grouped is derived by aggregating the attack by wkday and hour fields. - a new field called n is derived by using group_by() and count() functions. - na.omit() is used to exclude missing value. - geom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles. - theme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot. - coord_equal() is used to ensure the plot will have an aspect ratio of 1:1. - scale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\n\n\nThen we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there’s no need to further preprocess the data.\n\n\nBuilding Multiple Calendar Heatmaps\nChallenge: Building multiple heatmaps for the top four countries with the highest number of attacks.\n\n\n\nPlotting Multiple Calendar Heatmaps\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\nattacks_by_country <- count(\n  attacks, source_country) %>%\n  mutate(percent = percent(n/sum(n))) %>%\n  arrange(desc(n))\n\nStep 2: Preparing the tidy data frame\nIn this step, you are required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\n\ntop4 <- attacks_by_country$source_country[1:4]\ntop4_attacks <- attacks %>%\n  filter(source_country %in% top4) %>%\n  count(source_country, wkday, hour) %>%\n  ungroup() %>%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %>%\n  na.omit()\n\n\n\nPlotting Multiple Calendar Heatmaps\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "InClassEx/InClassEx06/Hands-on_Ex06-VisTime.html#cycle-plot",
    "href": "InClassEx/InClassEx06/Hands-on_Ex06-VisTime.html#cycle-plot",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Cycle Plot",
    "text": "Cycle Plot\nIn this section, you will learn how to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.\n\n\nData Preparation\n\nStep 1: Data Import\nFor the purpose of this hands-on exercise, arrivals_by_air.xlsx will be used.\nThe code chunk below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\nair <- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\n\nStep 2: Deriving month and year fields\nNext, two new fields called month and year are derived from Month-Year field.\n\nair$month <- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year <- year(ymd(air$`Month-Year`))\n\n\n\nStep 4: Extracting the target country\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\nVietnam <- air %>% \n  select(`Vietnam`, \n         month, \n         year) %>%\n  filter(year >= 2010)\n\n\n\nStep 5: Computing year average arrivals by month\nThe code chunk below uses group_by() and summarise() of dplyr to compute year average arrivals by month.\n\nhline.data <- Vietnam %>% \n  group_by(month) %>%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\n\n\nPlotting the cycle plot\nThe code chunk below is used to plot the cycle plot as shown in Slide 12/23.\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\")"
  },
  {
    "objectID": "InClassEx/InClassEx07/InClassEx07.html",
    "href": "InClassEx/InClassEx07/InClassEx07.html",
    "title": "In-Class Ex 07",
    "section": "",
    "text": "Show the code\npacman::p_load(sf,tmap,tidyverse)"
  },
  {
    "objectID": "InClassEx/InClassEx07/InClassEx07.html#import-files-and-preparing-the-data",
    "href": "InClassEx/InClassEx07/InClassEx07.html#import-files-and-preparing-the-data",
    "title": "In-Class Ex 07",
    "section": "Import files and preparing the data",
    "text": "Import files and preparing the data\n\n\nShow the code\nsgpools <- read_csv(\"data/aspatial/SGPools_svy21.csv\")\n\n\nCreating sf data frame from an aspatial data frame\n\n\nShow the code\nsgpools_sf <- st_as_sf(sgpools, \n                       coords = c(\"XCOORD\", \"YCOORD\"),\n                       crs= 3414)"
  },
  {
    "objectID": "InClassEx/InClassEx07/InClassEx07.html#drawing-proportional-symbol-map",
    "href": "InClassEx/InClassEx07/InClassEx07.html#drawing-proportional-symbol-map",
    "title": "In-Class Ex 07",
    "section": "Drawing Proportional Symbol Map",
    "text": "Drawing Proportional Symbol Map\nSetting the interactivity of the map\n\n\nShow the code\ntmap_mode(\"view\")\n\n\nDraw the map\n\n\nShow the code\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"red\",\n           size = 1,\n           border.col = \"black\",\n           border.lwd = 1)"
  },
  {
    "objectID": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#tools-used",
    "href": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#tools-used",
    "title": "Take Home Exercise 03 - Putting Visual Analytics into Practical Use",
    "section": "Tools used",
    "text": "Tools used\n\nR Binaries 4.2.2 on Windows 11 Professional\nRStudio 2022.12.0 build 353 on Windows 11 Professional (RStudio has been renamed as Posit)"
  },
  {
    "objectID": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#libraries",
    "href": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#libraries",
    "title": "Take Home Exercise 03 - Putting Visual Analytics into Practical Use",
    "section": "Libraries",
    "text": "Libraries\nThe R packages we’ll use for this analysis are:\n\ntidyverse - a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\nggplot2 - a system for declaratively creating graphics, based on The Grammar of Graphics (ggplot2 is included in the tidyverse package, i’m highlighting it here for emphasis, since it’s our main tool for visualisation)\nggthemes - The ggthemes package provides extra themes, geoms, and scales for the ggplot2 package\nggiraph - a package that provides interactive elements to ggplot like animations and tooltips (was not used after experimenting with it, leaving it here for reference)\nplotly - another package that provides interactive elements to ggplot\nggstatplot: an extension of ggplot2 package for creating graphics with details from statistical tests included in the plots themselves and targeted primarily at behavioral sciences community to provide a one-line code to produce information-rich plots."
  },
  {
    "objectID": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#data-used",
    "href": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#data-used",
    "title": "Take Home Exercise 03 - Putting Visual Analytics into Practical Use",
    "section": "Data Used",
    "text": "Data Used\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2022 should be used to prepare the analytical visualisation. It is available at Department of Statistics, Singapore(in short SingStat)."
  },
  {
    "objectID": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#importing-and-preparing-the-data-set",
    "href": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#importing-and-preparing-the-data-set",
    "title": "Take Home Exercise 03 - Putting Visual Analytics into Practical Use",
    "section": "Importing and preparing the Data Set",
    "text": "Importing and preparing the Data Set\n\nloading packages\nWe first load the required packages.\n\n\nShow the code\npacman::p_load(tidyverse, add2ggplot, plotly, ggrepel, ggstatsplot, ggiraph)\n\n\nNow we load the data set. The data has 147695 rows and 11 columns.\n\n\nShow the code\ntotal_Resale_Data <- read_csv('data/resale-flat-prices-based-on-registration-date-from-jan-2017-onwards.csv')\n\n\nWe now use the glimpse function to take a look at the features in the data set. Glimpse is very useful as it allows to have look at the type of data (number, string) and what’s inside quickly.\n\n\nShow the code\nglimpse(total_Resale_Data)\n\n\nRows: 146,965\nColumns: 11\n$ month               <chr> \"2017-01\", \"2017-01\", \"2017-01\", \"2017-01\", \"2017-…\n$ town                <chr> \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO …\n$ flat_type           <chr> \"2 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", …\n$ block               <chr> \"406\", \"108\", \"602\", \"465\", \"601\", \"150\", \"447\", \"…\n$ street_name         <chr> \"ANG MO KIO AVE 10\", \"ANG MO KIO AVE 4\", \"ANG MO K…\n$ storey_range        <chr> \"10 TO 12\", \"01 TO 03\", \"01 TO 03\", \"04 TO 06\", \"0…\n$ floor_area_sqm      <dbl> 44, 67, 67, 68, 67, 68, 68, 67, 68, 67, 68, 67, 67…\n$ flat_model          <chr> \"Improved\", \"New Generation\", \"New Generation\", \"N…\n$ lease_commence_date <dbl> 1979, 1978, 1980, 1980, 1980, 1981, 1979, 1976, 19…\n$ remaining_lease     <chr> \"61 years 04 months\", \"60 years 07 months\", \"62 ye…\n$ resale_price        <dbl> 232000, 250000, 262000, 265000, 265000, 275000, 28…\n\n\n\n\n\n\n\n\nObservations\n\nmonth is logically supposed to be an indicator for date but is currently a string. this may cause problems later on. we would deal with this later\nstorey_range logically should be continuous, however it is currently a string. there is a change that it may not be sequenced correctly. we will check this later\nremaining_lease logically indicates a date variable, but is currently in a string format that would be difficult to manipulate. we may change this later if we deem this feature to be needed for our visualisations.\n\n\n\n\n\n\nData Wrangling\nI will be structuring the data wrangling in this manner (filter rows > manipulate variables > add features > drop features ). This structure allows me to quickly come back to the relevant sections to add new codes should i decide to create more visualizations that data which i might have previously filtered or dropped.\n\nFilter required data\nThe current task sis only focused on resales in 2022 as well as only 3, 4 and 5 room flats, hence we will filter the dataset to keep only these data first.\n\n\n\n\n\n\nNote\n\n\n\nI decided to do the filtering as the 1st step as this makes the data smaller and faster to process subsequently. Although the impact may not be so visible due to this being a smaller data set, it could make quite a big difference if the data set is large.\n\n\ngrepl() simply searches for matches of a specified character pattern. this allows me to extract rows for 2022 without first manipulating data in the month column.\n\n\nShow the code\nFiltered_2022_345rm <- filter(total_Resale_Data, grepl('2022', month)\n                              & flat_type %in% c(\"3 ROOM\", \"4 ROOM\",\"5 ROOM\"))\n\n\nNow the data set has 24,371 rows and 11 columns.\n\n\nManipulate data\nChecking the storey_range feature. unique() lists out the unique instances of the values in sequence.\n\n\nShow the code\nunique(Filtered_2022_345rm$storey_range)\n\n\n [1] \"07 TO 09\" \"04 TO 06\" \"01 TO 03\" \"10 TO 12\" \"13 TO 15\" \"25 TO 27\"\n [7] \"16 TO 18\" \"19 TO 21\" \"22 TO 24\" \"28 TO 30\" \"34 TO 36\" \"31 TO 33\"\n[13] \"37 TO 39\" \"40 TO 42\" \"43 TO 45\" \"49 TO 51\" \"46 TO 48\"\n\n\nThe storey_range is indeed sequenced wrongly. we would use factor() to correct it. factor() allows us to sequence non numerical values in a specified sequence.\n\n\nShow the code\nstorey_correct <- c(\"01 TO 03\", \"04 TO 06\", \"07 TO 09\", \"10 TO 12\", \"13 TO 15\", \"16 TO 18\", \"19 TO 21\", \"22 TO 24\", \"25 TO 27\", \"28 TO 30\", \"31 TO 33\", \"34 TO 36\", \"37 TO 39\", \"40 TO 42\", \"43 TO 45\", \"46 TO 48\", \"49 TO 51\")\n\nFiltered_2022_345rm <- Filtered_2022_345rm %>%\n  mutate (storey_range = factor(storey_range, levels = storey_correct)) %>%\n  ungroup()\n\n\nWe should also convert values in the month feature into proper date values\n\n\nShow the code\nFiltered_2022_345rm <- Filtered_2022_345rm %>%\n  mutate(month = as.Date(paste(month, \"-01\", sep=\"\"),\n                         format=\"%Y -%m -%d\"))\n\n\nConfirming that the month feature is now date\n\n\nShow the code\nglimpse(Filtered_2022_345rm)\n\n\nRows: 24,371\nColumns: 11\n$ month               <date> 2022-01-01, 2022-01-01, 2022-01-01, 2022-01-01, 2…\n$ town                <chr> \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO …\n$ flat_type           <chr> \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", …\n$ block               <chr> \"320\", \"225\", \"331\", \"534\", \"578\", \"452\", \"560\", \"…\n$ street_name         <chr> \"ANG MO KIO AVE 1\", \"ANG MO KIO AVE 1\", \"ANG MO KI…\n$ storey_range        <fct> 07 TO 09, 07 TO 09, 07 TO 09, 07 TO 09, 04 TO 06, …\n$ floor_area_sqm      <dbl> 73, 67, 68, 82, 67, 83, 67, 67, 67, 67, 67, 75, 68…\n$ flat_model          <chr> \"New Generation\", \"New Generation\", \"New Generatio…\n$ lease_commence_date <dbl> 1977, 1978, 1981, 1980, 1980, 1979, 1980, 1979, 19…\n$ remaining_lease     <chr> \"54 years 05 months\", \"55 years 01 month\", \"58 yea…\n$ resale_price        <dbl> 358000, 355000, 338000, 420000, 328000, 360000, 30…\n\n\nIt would also be a good idea to convert resale price into “thousands” to make it more readable by humans rather than a whole string of numbers.\n\n\nShow the code\nFiltered_2022_345rm <- Filtered_2022_345rm %>%\n  mutate(priceK = round(resale_price / 1000))\n\n\n\n\nAdd Features\nThere are a few features that would definitely be useful for the visualisations later. for example, it doesn’t make sense to compare the resale price between 3, 4, 5 room flats as they are not apples to apples comparisons, a more sensible approach is to derive the price per square meter value to compare between these different housing types. We can always come back to this section to create more features when the need arises.\n\n\nShow the code\nFiltered_2022_345rm <- Filtered_2022_345rm %>%\n  mutate(price_psm = round(resale_price / floor_area_sqm)) %>%\n  mutate(priceK = round(resale_price / 1000))\n\n\n\n\nDrop Features\n\n\n\n\n\n\nNote\n\n\n\nDrop column is my last step because additional columns might be created as an intermediary when we are deriving additional features in the previous step. In that sense, placing drop feature as the last step allows me to clean up the data set before visualistions. however if the original data set is huge. it might be a good idea to drop columns directly after filtering.\n\n\nWe had already checked the features earlier that there are some features that we do not expect to be using. we will now remove them\n\n\n\n\n\nCheck for NA values\nLastly, we will now do a sanity check for NA values.\n\n\nShow the code\ncolSums(is.na(Filtered_2022_345rm))\n\n\n              month                town           flat_type               block \n                  0                   0                   0                   0 \n        street_name        storey_range      floor_area_sqm          flat_model \n                  0                   0                   0                   0 \nlease_commence_date     remaining_lease        resale_price              priceK \n                  0                   0                   0                   0 \n          price_psm \n                  0 \n\n\nGood! there are no NA values. The data set is now ready for further visualisations!"
  },
  {
    "objectID": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#visualisations",
    "href": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#visualisations",
    "title": "Take Home Exercise 03 - Putting Visual Analytics into Practical Use",
    "section": "Visualisations",
    "text": "Visualisations\nBefore we get into visualisations proper, a point should be made on visualising data. Visualisation works on the premise that the human mind is wired to quickly identify visual patterns from data that may otherwise escape the untrained eyes. However it is important to ensure that the visualised data is relevant and helpful to the user. We should not be blindly applying every visualisation technique in the book especially when it doesn’t add value to understanding the data. With this in mind, i would be focusing my visualisations on those that help buying decisions and (mostly) split them into the different flat types to allow a user to easily find what he needs (Many features between different flat types are not an apples to apples comparison anyway). More thoughts on data visualisation would be discussed in the conclusion.\n\nMedian Resale Price by Flat Type (2022)\nWe first check the spread of resales prices across the various flat types to determine if mean or median prices would be more indicative\n\n3-Room4-Room5-Room\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can see that the prices across all three flat types are right skewed. likely due to outliers with extremely high resale prices. Hence it would be a better idea to use median price.\n\n\nShow the code\n# Group data by flat type\nFiltered_2022_345rm_grouped <- Filtered_2022_345rm %>%\n  group_by(flat_type,month) %>%\n  summarise(priceK = median(priceK))\n\n# Plot monthly trend by flat type\np <-ggplot(Filtered_2022_345rm_grouped,aes(x=month, y= priceK,color = flat_type))+\n  geom_line()+\n  scale_x_date(date_labels = \"%b\",date_breaks = \"1 months\")+\n  labs(x = \"Month\", y =  \"Resale Price (SGD, thousands)\", title =  \"Median Resale Price by Flat Type (2022)\")+\n  theme_classic2()\n\nggplotly(p, tooltip = c(\"month\", \"priceK\"))\n\n\n\n\n\n\nWe can make a few observations here:\n\nThere is a slight trend of increasing prices across all 3 flat types within the year 2022.\nThe prices of the 3 flat types do not overlap. meaning The lowest priced 4 room flat would not be cheaper than the highest priced 3 room flat, and the lowest priced 5 room flat would not be cheaper than the highest priced 4 room flat. This means that a buyer would not be able to find bargains where he could have gotten a larger flat for the same or lower price.\n\n\n\nFlat Supply\n\nOverview3-Room4-Room5-Room"
  },
  {
    "objectID": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#conclusion",
    "href": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#conclusion",
    "title": "Take Home Exercise 03 - Putting Visual Analytics into Practical Use",
    "section": "Conclusion",
    "text": "Conclusion\ncomplicated plots are not always the answer\nexample, finding out whether mean or median is more suitable\nTreemap is deemed unsuitable"
  },
  {
    "objectID": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#visualisation-of-data",
    "href": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#visualisation-of-data",
    "title": "Take Home Exercise 03 - Putting Visual Analytics into Practical Use",
    "section": "Visualisation of data",
    "text": "Visualisation of data\nBefore we get into visualisations proper, a point should be made on visualising data. Visualisation works on the premise that the human mind is wired to quickly identify visual patterns from data that may otherwise escape the untrained eyes. However it is important to ensure that the visualised data is relevant and helpful to the user. We should not be blindly applying every visualisation technique in the book especially when it doesn’t add value to understanding the data. With this in mind, i would be focusing my visualisations on those that help buying decisions and split them into the different flat types (where applicable) to allow a user to easily find what he needs. More thoughts on data visualisation would be discussed in the conclusion.Distribution of prices\nWe will first look at h\n\nOverview of Singapore Resale Market\n\nOverview of Transactions by Flat Types\nLet’s first take a look at the resale transactions of 3, 4, 5 room flats in proportion to each other\n\n\nShow the code\npie345  <- Filtered_2022_345rm %>%\n  group_by(flat_type) %>%\n  summarise(count = n()) %>%\n  mutate(typepct = round(count/sum(count)*100)) %>%\n  mutate(ypos_p = rev(cumsum(rev(typepct))),\n         pos_p = typepct/2 + lead(ypos_p,1),\n         pos_p = if_else(is.na(pos_p), typepct/2, pos_p))\n# \nggplot(data = pie345, aes(x = \"\", y = typepct, fill = factor(flat_type))) +\n  geom_bar(width = 1, stat = 'identity') +\n  coord_polar(theta='y') +\n  geom_label_repel(data = pie345,\n                   aes(y = pos_p, label = paste0(typepct, \"%\")),\n                   size = 4.5, nudge_x = 1, color = c(1, 1, 1), show.legend = FALSE) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nObservation\n\nThe most of transacted flat type is 4-room flat (46%) followed by 5-Room (28%) then 3-Room (26%). This suggests that for a potential buyer / seller, its probably going to be easier to make a successful transaction for a 4-Room flat.\n\n\n\n\n\n\nDistributions of Resale Prices\nWe first check thedistribution of resales prices across the various flat types to determine if mean or median prices would be more indicative\n\n\nShow the code\nggplot(data = Filtered_2022_345rm, \n       aes(x = priceK)) +\n  geom_histogram(bins = 100,            \n                 color=\"black\",\n                 fill=\"#BA55D3\") +\n  theme_minimal()+\n  facet_wrap(~ flat_type, nrow = 3)\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\nThe distribution for prices across all flat types are right skewed. This suggests that outliers are skewing the data and that median price\nIt is possible to buy a larger flat with the same price of a smaller flat in some cases\n\n\n\n\n\n\nShow the code\nggbetweenstats(\n  data = Filtered_2022_345rm,\n  x = flat_type, \n  y = priceK)+\n  theme_minimal()\n\n\n\n\n\nWe can see that the prices across all three flat types are right skewed. likely due to outliers with extremely high resale prices. Hence it would be a better idea to use median price.\n\n\nMedian Price Trend within 2022\nWe now take a look at the price trends of all three types of flats within the year 2022.\n\n\nShow the code\n# Group data by flat type\nFiltered_2022_345rm_grouped <- Filtered_2022_345rm %>%\n  group_by(flat_type,month) %>%\n  summarise(priceK = median(priceK))\n\n# Plot monthly trend by flat type\np <-ggplot(Filtered_2022_345rm_grouped,aes(x=month, y= priceK,color = flat_type))+\n  geom_line()+\n  scale_x_date(date_labels = \"%b\",date_breaks = \"1 months\")+\n  labs(x = \"Month\", y =  \"Median Resale Price (SGD, thousands)\", title =  \"Median Resale Price by Flat Type (2022)\")+\n  theme_minimal()\n\nggplotly(p, tooltip = c(\"month\", \"priceK\"))\n\n\n\n\n\n\n\n\n\n\n\n\nObservations:\n\nThere is a slight trend of increasing prices across all 3 flat types within the year 2022\n\n\n\n\n\n\n\nSingapore Resale Prices by Planning Areas\nEarlier, we had an overview of the Singapore Resale Market. that gives users an idea of the supply and demand of the flats in general, as well as median prices. however a buyer would also be interested in data for specific planning areas. so let’s dive into more details for the data.\n\nTransactions by Planning Areas\nFirst, lets take a look at supply again, but by Planing areas. A pie chart would not be suitable here, given the number of planning areas. So let’s look at the data with a lollipop plot\n\nOverview3-Room4-Room5-Room\n\n\n\n\nShow the code\nggplot(Filtered_2022_345rm, aes(y=town, fill = flat_type))+\n  geom_bar()+\n    scale_fill_viridis_d(option = \"D\") +\n  theme_minimal() +\n  labs(title = \"Flat type transaction\", fill = \"Flat type\",\n       x = \"\", y = \"\")\n\n\n\n\n\n\n\n\n\nShow the code\nFiltered_2022_345rm_grouped2 <- Filtered_2022_345rm %>%\n  filter(flat_type %in% c(\"3 ROOM\")) %>%\n  group_by(town) %>%\n  summarise(count = n())\n\np2 <- ggplot(data = Filtered_2022_345rm_grouped2, aes(x=town,y=count)) +\n  geom_point(colour = \"red\") +\n  geom_segment( aes(x=town, xend=town, y=0, yend=count))+\n  labs(title = \"No of Transactions\", y = \"\", x=\"Planning Areas\") +\n  theme_minimal() +\n  coord_flip() +\n  theme(\n    panel.grid.major.y = element_blank(),\n    panel.border = element_blank(),\n    axis.ticks.y = element_blank()\n  )\n\nggplotly(p2)\n\n\n\n\n\n\n\n\n\n\nShow the code\nFiltered_2022_345rm_grouped2 <- Filtered_2022_345rm %>%\n  filter(flat_type %in% c(\"4 ROOM\")) %>%\n  group_by(town) %>%\n  summarise(count = n())\n\np2 <- ggplot(data = Filtered_2022_345rm_grouped2, aes(x=town,y=count)) +\n  geom_point(colour = \"red\") +\n  geom_segment( aes(x=town, xend=town, y=0, yend=count))+\n  labs(title = \"No of Transactions\", y = \"\", x=\"Planning Areas\") +\n  theme_minimal() +\n  coord_flip() +\n  theme(\n    panel.grid.major.y = element_blank(),\n    panel.border = element_blank(),\n    axis.ticks.y = element_blank()\n  )\n\nggplotly(p2)\n\n\n\n\n\n\n\n\n\n\nShow the code\nFiltered_2022_345rm_grouped2 <- Filtered_2022_345rm %>%\n  filter(flat_type %in% c(\"5 ROOM\")) %>%\n  group_by(town) %>%\n  summarise(count = n())\n\np2 <- ggplot(data = Filtered_2022_345rm_grouped2, aes(x=town,y=count)) +\n  geom_point(colour = \"red\") +\n  geom_segment( aes(x=town, xend=town, y=0, yend=count))+\n  labs(title = \"No of Transactions\", y = \"\", x=\"Planning Areas\") +\n  theme_minimal() +\n  coord_flip() +\n  theme(\n    panel.grid.major.y = element_blank(),\n    panel.border = element_blank(),\n    axis.ticks.y = element_blank()\n  )\n\nggplotly(p2)\n\n\n\n\n\n\n\n\n\n\n\nPrice Range by planning areas\nDumbbell\n\nOverview3-Room4-Room5-Room\n\n\n\n\nShow the code\nFiltered_2022_345rmRange <- Filtered_2022_345rm %>%\n  group_by(town) %>%\n  summarise(min_price = min(priceK),\n            max_price = max(priceK))\n\np3 <- plot_ly(Filtered_2022_345rmRange) %>% \n  add_segments(x = ~min_price, xend = ~max_price, y = ~town, yend = ~town, showlegend = FALSE) %>%\n  add_markers(x = ~min_price, y = ~town, name = \"Min\", color = I(\"#e66819\")) %>%\n  add_markers(x = ~max_price, y = ~town, name = \"Max\", color = I(\"#bf0d31\")) %>%\n  layout(\n    title = \"Resale Price Range Aross Planning Areas (SGD, Thousands)\",\n    xaxis = list(title = \"Resale Price (SGD, thousands)\"),\n    yaxis = list(title = \"Planning Area\"),\n    margin = list(l = 70)\n  )\n\np3\n\n\n\n\n\n\n\n\n\n\nShow the code\nFiltered_2022_345rmRange <- Filtered_2022_345rm %>%\n  filter(flat_type %in% c(\"3 ROOM\")) %>%\n  group_by(town) %>%\n  summarise(min_price = min(priceK),\n            max_price = max(priceK))\n\np3 <- plot_ly(Filtered_2022_345rmRange) %>% \n  add_segments(x = ~min_price, xend = ~max_price, y = ~town, yend = ~town, showlegend = FALSE) %>%\n  add_markers(x = ~min_price, y = ~town, name = \"Min\", color = I(\"#e66819\")) %>%\n  add_markers(x = ~max_price, y = ~town, name = \"Max\", color = I(\"#bf0d31\")) %>%\n  layout(\n    title = \"Resale Price Range Aross Planning Areas (SGD, Thousands)\",\n    xaxis = list(title = \"Resale Price (SGD, thousands)\"),\n    yaxis = list(title = \"Planning Area\"),\n    margin = list(l = 70)\n  )\n\np3\n\n\n\n\n\n\n\n\n\n\nShow the code\nFiltered_2022_345rmRange <- Filtered_2022_345rm %>%\n  filter(flat_type %in% c(\"4 ROOM\")) %>%\n  group_by(town) %>%\n  summarise(min_price = min(priceK),\n            max_price = max(priceK))\n\np3 <- plot_ly(Filtered_2022_345rmRange) %>% \n  add_segments(x = ~min_price, xend = ~max_price, y = ~town, yend = ~town, showlegend = FALSE) %>%\n  add_markers(x = ~min_price, y = ~town, name = \"Min\", color = I(\"#e66819\")) %>%\n  add_markers(x = ~max_price, y = ~town, name = \"Max\", color = I(\"#bf0d31\")) %>%\n  layout(\n    title = \"Resale Price Range Aross Planning Areas (SGD, Thousands)\",\n    xaxis = list(title = \"Resale Price (SGD, thousands)\"),\n    yaxis = list(title = \"Planning Area\"),\n    margin = list(l = 70)\n  )\n\np3\n\n\n\n\n\n\n\n\n\n\nShow the code\nFiltered_2022_345rmRange <- Filtered_2022_345rm %>%\n  filter(flat_type %in% c(\"5 ROOM\")) %>%\n  group_by(town) %>%\n  summarise(min_price = min(priceK),\n            max_price = max(priceK))\n\np3 <- plot_ly(Filtered_2022_345rmRange) %>% \n  add_segments(x = ~min_price, xend = ~max_price, y = ~town, yend = ~town, showlegend = FALSE) %>%\n  add_markers(x = ~min_price, y = ~town, name = \"Min\", color = I(\"#e66819\")) %>%\n  add_markers(x = ~max_price, y = ~town, name = \"Max\", color = I(\"#bf0d31\")) %>%\n  layout(\n    title = \"Resale Price Range Aross Planning Areas (SGD, Thousands)\",\n    xaxis = list(title = \"Resale Price (SGD, thousands)\"),\n    yaxis = list(title = \"Planning Area\"),\n    margin = list(l = 70)\n  )\n\np3\n\n\n\n\n\n\n\n\n\n\n\nMedian Resale Price by Storey Range\n\nOverview3-Room4-Room5-Room\n\n\n\n\nShow the code\nFiltered_2022_345rmStorey <- Filtered_2022_345rm %>%\n  group_by(town,storey_range) %>%\n  summarise(medianpriceK = median(priceK))\n\ntooltip_p4 <-  paste(\"Town:\", Filtered_2022_345rmStorey$town,\n                      \"\\nStorey: \" , Filtered_2022_345rmStorey$storey_range,\n                      \"\\nMedian Price: \",Filtered_2022_345rmStorey$medianpriceK,\"K\")\n\n\np4 <- ggplot(data = Filtered_2022_345rmStorey, aes(x = town, y = storey_range, fill = medianpriceK)) +\n  geom_tile_interactive(tooltip = tooltip_p4) +\n  scale_fill_gradient(low = \"#ECE2F0\", high = \"#6A51A3\") +\n  labs(title = \"Median Resale Price against Storey Range in Different Towns, 2022 Singapore\", \n       x = \"Residential Town\", \n       y = \"Storey Range\") +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\ngirafe(\n  ggobj = p4,\n  width_svg = 10,\n  height_svg = 10 * 0.618\n)\n\n\n\n\n\n\n\n\n\n\nShow the code\nFiltered_2022_345rmStorey <- Filtered_2022_345rm %>%\n  filter(flat_type %in% c(\"3 ROOM\")) %>%\n  group_by(town,storey_range) %>%\n  summarise(medianpriceK = median(priceK))\n\ntooltip_p4 <-  paste(\"Town:\", Filtered_2022_345rmStorey$town,\n                      \"\\nStorey: \" , Filtered_2022_345rmStorey$storey_range,\n                      \"\\nMedian Price: \",Filtered_2022_345rmStorey$medianpriceK,\"K\")\n\n\np4 <- ggplot(data = Filtered_2022_345rmStorey, aes(x = town, y = storey_range, fill = medianpriceK)) +\n  geom_tile_interactive(tooltip = tooltip_p4) +\n  scale_fill_gradient(low = \"#ECE2F0\", high = \"#6A51A3\") +\n  labs(title = \"Median Resale Price against Storey Range in Different Towns, 2022 Singapore\", \n       x = \"Residential Town\", \n       y = \"Storey Range\") +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\ngirafe(\n  ggobj = p4,\n  width_svg = 10,\n  height_svg = 10 * 0.618\n)\n\n\n\n\n\n\n\n\n\n\nShow the code\nFiltered_2022_345rmStorey <- Filtered_2022_345rm %>%\n  filter(flat_type %in% c(\"4 ROOM\")) %>%\n  group_by(town,storey_range) %>%\n  summarise(medianpriceK = median(priceK))\n\ntooltip_p4 <-  paste(\"Town:\", Filtered_2022_345rmStorey$town,\n                      \"\\nStorey: \" , Filtered_2022_345rmStorey$storey_range,\n                      \"\\nMedian Price: \",Filtered_2022_345rmStorey$medianpriceK,\"K\")\n\n\np4 <- ggplot(data = Filtered_2022_345rmStorey, aes(x = town, y = storey_range, fill = medianpriceK)) +\n  geom_tile_interactive(tooltip = tooltip_p4) +\n  scale_fill_gradient(low = \"#ECE2F0\", high = \"#6A51A3\") +\n  labs(title = \"Median Resale Price against Storey Range in Different Towns, 2022 Singapore\", \n       x = \"Residential Town\", \n       y = \"Storey Range\") +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\ngirafe(\n  ggobj = p4,\n  width_svg = 10,\n  height_svg = 10 * 0.618\n)\n\n\n\n\n\n\n\n\n\n\nShow the code\nFiltered_2022_345rmStorey <- Filtered_2022_345rm %>%\n  filter(flat_type %in% c(\"5 ROOM\")) %>%\n  group_by(town,storey_range) %>%\n  summarise(medianpriceK = median(priceK))\n\ntooltip_p4 <-  paste(\"Town:\", Filtered_2022_345rmStorey$town,\n                      \"\\nStorey: \" , Filtered_2022_345rmStorey$storey_range,\n                      \"\\nMedian Price: \",Filtered_2022_345rmStorey$medianpriceK,\"K\")\n\n\np4 <- ggplot(data = Filtered_2022_345rmStorey, aes(x = town, y = storey_range, fill = medianpriceK)) +\n  geom_tile_interactive(tooltip = tooltip_p4) +\n  scale_fill_gradient(low = \"#ECE2F0\", high = \"#6A51A3\") +\n  labs(title = \"Median Resale Price against Storey Range in Different Towns, 2022 Singapore\", \n       x = \"Residential Town\", \n       y = \"Storey Range\") +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\ngirafe(\n  ggobj = p4,\n  width_svg = 10,\n  height_svg = 10 * 0.618\n)"
  },
  {
    "objectID": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#references",
    "href": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#references",
    "title": "Take Home Exercise 03 - Putting Visual Analytics into Practical Use",
    "section": "References",
    "text": "References\nhttps://datavizpyr.com/violinplot-vs-boxplot-when-violinplot-can-be-more-useful/\nhttps://isss608-tasapornv.netlify.app/take-home_ex/take-home_ex03/take-home_ex03\nhttps://www.valuechampion.sg/average-cost-housing-singapore\nhttps://towardsdatascience.com/mean-or-median-choose-based-on-the-decision-not-the-distribution-f951215c1376"
  }
]