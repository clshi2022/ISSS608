[
  {
    "objectID": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html",
    "href": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html",
    "title": "Take Home Exercise 03 - Putting Visual Analytics into Practical Use",
    "section": "",
    "text": "The task for this take home exercise is to uncover the salient patterns of the resale prices of public housing property by residential towns and estates in Singapore using appropriate analytical visualisation techniques learned in Lesson 4: Fundamentals of Visual Analytics.\nFor the purpose of this study, the focus should be on 3-ROOM, 4-ROOM and 5-ROOM types. We can choose to focus on either one housing type or multiple housing types. The study period should be on 2022.\nThe write-up of the take-home exercise should include but not limited to the followings:\n\nDescribe the selection and designed consideration of the analytical data visualisation used. The discussion should limit to not more than 150 words each.\nA reproducible description of the procedures used to prepare the analytical visualisation. Please refer to the peer submission I shared.\nA write-up of not more than 100 words to discuss the patterns reveal by each analytical visualisation prepared."
  },
  {
    "objectID": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#tools-used",
    "href": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#tools-used",
    "title": "Take Home Exercise 03 - Putting Visual Analytics into Practical Use",
    "section": "Tools used",
    "text": "Tools used\n\nR Binaries 4.2.2 on Windows 11 Professional\nRStudio 2022.12.0 build 353 on Windows 11 Professional (RStudio has been renamed as Posit)"
  },
  {
    "objectID": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#libraries",
    "href": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#libraries",
    "title": "Take Home Exercise 03 - Putting Visual Analytics into Practical Use",
    "section": "Libraries",
    "text": "Libraries\nThe R packages we’ll use for this analysis are:\n\ntidyverse - a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\nggplot2 - a system for declaratively creating graphics, based on The Grammar of Graphics (ggplot2 is included in the tidyverse package, i’m highlighting it here for emphasis, since it’s our main tool for visualisation).\nggrepel - ggrepel provides geoms for ggplot2 to repel overlapping text labels. Text labels repel away from each other, away from data points, and away from edges of the plotting area.\nggiraph - a package that provides interactive elements to ggplot like animations and tooltips (was not used after experimenting with it, leaving it here for reference).\nplotly - another package that provides interactive elements to ggplot.\nggstatplot - an extension of ggplot2 package for creating graphics with details from statistical tests included in the plots themselves and targeted primarily at behavioral sciences community to provide a one-line code to produce information-rich plots."
  },
  {
    "objectID": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#data-used",
    "href": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#data-used",
    "title": "Take Home Exercise 03 - Putting Visual Analytics into Practical Use",
    "section": "Data Used",
    "text": "Data Used\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2022 should be used to prepare the analytical visualisation. It is available at Department of Statistics, Singapore(in short SingStat)."
  },
  {
    "objectID": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#importing-and-preparing-the-data-set",
    "href": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#importing-and-preparing-the-data-set",
    "title": "Take Home Exercise 03 - Putting Visual Analytics into Practical Use",
    "section": "Importing and preparing the Data Set",
    "text": "Importing and preparing the Data Set\n\nloading packages\nWe first load the required packages.\n\n\nShow the code\npacman::p_load(tidyverse, add2ggplot, plotly, ggrepel, ggstatsplot, ggiraph)\n\n\nNow we load the data set. The data has 147695 rows and 11 columns.\n\n\nShow the code\ntotal_Resale_Data <- read_csv('data/resale-flat-prices-based-on-registration-date-from-jan-2017-onwards.csv')\n\n\nWe now use the glimpse function to take a look at the features in the data set. Glimpse is very useful as it allows to have look at the type of data (number, string) and what’s inside quickly.\n\n\nShow the code\nglimpse(total_Resale_Data)\n\n\nRows: 146,965\nColumns: 11\n$ month               <chr> \"2017-01\", \"2017-01\", \"2017-01\", \"2017-01\", \"2017-…\n$ town                <chr> \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO …\n$ flat_type           <chr> \"2 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", …\n$ block               <chr> \"406\", \"108\", \"602\", \"465\", \"601\", \"150\", \"447\", \"…\n$ street_name         <chr> \"ANG MO KIO AVE 10\", \"ANG MO KIO AVE 4\", \"ANG MO K…\n$ storey_range        <chr> \"10 TO 12\", \"01 TO 03\", \"01 TO 03\", \"04 TO 06\", \"0…\n$ floor_area_sqm      <dbl> 44, 67, 67, 68, 67, 68, 68, 67, 68, 67, 68, 67, 67…\n$ flat_model          <chr> \"Improved\", \"New Generation\", \"New Generation\", \"N…\n$ lease_commence_date <dbl> 1979, 1978, 1980, 1980, 1980, 1981, 1979, 1976, 19…\n$ remaining_lease     <chr> \"61 years 04 months\", \"60 years 07 months\", \"62 ye…\n$ resale_price        <dbl> 232000, 250000, 262000, 265000, 265000, 275000, 28…\n\n\n\n\n\n\n\n\nObservations\n\nmonth is logically supposed to be an indicator for date but is currently a string. this may cause problems later on. we would deal with this later\nstorey_range logically should be continuous, however it is currently a string. there is a change that it may not be sequenced correctly. we will check this later\nremaining_lease logically indicates a date variable, but is currently in a string format that would be difficult to manipulate. we may change this later if we deem this feature to be needed for our visualisations.\n\n\n\n\n\n\nData Wrangling\nI will be structuring the data wrangling in this manner (filter rows > manipulate variables > add features > drop features ). This structure allows me to quickly come back to the relevant sections to add new codes should i decide to create more visualizations that data which i might have previously filtered or dropped.\n\nFilter required data\nThe current task sis only focused on resales in 2022 as well as only 3, 4 and 5 room flats, hence we will filter the dataset to keep only these data first.\n\n\n\n\n\n\nNote\n\n\n\nI decided to do the filtering as the 1st step as this makes the data smaller and faster to process subsequently. Although the impact may not be so visible due to this being a smaller data set, it could make quite a big difference if the data set is large.\n\n\ngrepl() simply searches for matches of a specified character pattern. this allows me to extract rows for 2022 without first manipulating data in the month column.\n\n\nShow the code\nFiltered_2022_345rm <- filter(total_Resale_Data, grepl('2022', month)\n                              & flat_type %in% c(\"3 ROOM\", \"4 ROOM\",\"5 ROOM\"))\n\n\nNow the data set has 24,371 rows and 11 columns.\n\n\nManipulate data\nChecking the storey_range feature. unique() lists out the unique instances of the values in sequence.\n\n\nShow the code\nunique(Filtered_2022_345rm$storey_range)\n\n\n [1] \"07 TO 09\" \"04 TO 06\" \"01 TO 03\" \"10 TO 12\" \"13 TO 15\" \"25 TO 27\"\n [7] \"16 TO 18\" \"19 TO 21\" \"22 TO 24\" \"28 TO 30\" \"34 TO 36\" \"31 TO 33\"\n[13] \"37 TO 39\" \"40 TO 42\" \"43 TO 45\" \"49 TO 51\" \"46 TO 48\"\n\n\nThe storey_range is indeed sequenced wrongly. we would use factor() to correct it. factor() allows us to sequence non numerical values in a specified sequence.\n\n\nShow the code\nstorey_correct <- c(\"01 TO 03\", \"04 TO 06\", \"07 TO 09\", \"10 TO 12\", \"13 TO 15\", \"16 TO 18\", \"19 TO 21\", \"22 TO 24\", \"25 TO 27\", \"28 TO 30\", \"31 TO 33\", \"34 TO 36\", \"37 TO 39\", \"40 TO 42\", \"43 TO 45\", \"46 TO 48\", \"49 TO 51\")\n\nFiltered_2022_345rm <- Filtered_2022_345rm %>%\n  mutate (storey_range = factor(storey_range, levels = storey_correct)) %>%\n  ungroup()\n\n\nWe should also convert values in the month feature into proper date values\n\n\nShow the code\nFiltered_2022_345rm <- Filtered_2022_345rm %>%\n  mutate(month = as.Date(paste(month, \"-01\", sep=\"\"),\n                         format=\"%Y -%m -%d\"))\n\n\nConfirming that the month feature is now date\n\n\nShow the code\nglimpse(Filtered_2022_345rm)\n\n\nRows: 24,371\nColumns: 11\n$ month               <date> 2022-01-01, 2022-01-01, 2022-01-01, 2022-01-01, 2…\n$ town                <chr> \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO …\n$ flat_type           <chr> \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", …\n$ block               <chr> \"320\", \"225\", \"331\", \"534\", \"578\", \"452\", \"560\", \"…\n$ street_name         <chr> \"ANG MO KIO AVE 1\", \"ANG MO KIO AVE 1\", \"ANG MO KI…\n$ storey_range        <fct> 07 TO 09, 07 TO 09, 07 TO 09, 07 TO 09, 04 TO 06, …\n$ floor_area_sqm      <dbl> 73, 67, 68, 82, 67, 83, 67, 67, 67, 67, 67, 75, 68…\n$ flat_model          <chr> \"New Generation\", \"New Generation\", \"New Generatio…\n$ lease_commence_date <dbl> 1977, 1978, 1981, 1980, 1980, 1979, 1980, 1979, 19…\n$ remaining_lease     <chr> \"54 years 05 months\", \"55 years 01 month\", \"58 yea…\n$ resale_price        <dbl> 358000, 355000, 338000, 420000, 328000, 360000, 30…\n\n\nIt would also be a good idea to convert resale price into “thousands” to make it more readable by humans rather than a whole string of numbers.\n\n\nShow the code\nFiltered_2022_345rm <- Filtered_2022_345rm %>%\n  mutate(priceK = round(resale_price / 1000))\n\n\n\n\nAdd Features\nThere are a few features that would definitely be useful for the visualisations later. for example, it doesn’t make sense to compare the resale price between 3, 4, 5 room flats as they are not apples to apples comparisons, a more sensible approach is to derive the price per square meter value to compare between these different housing types. We can always come back to this section to create more features when the need arises.\n\n\nShow the code\nFiltered_2022_345rm <- Filtered_2022_345rm %>%\n  mutate(price_psm = round(resale_price / floor_area_sqm)) %>%\n  mutate(priceK = round(resale_price / 1000))\n\n\n\n\nDrop Features\n\n\n\n\n\n\nNote\n\n\n\nDrop column is my last step because additional columns might be created as an intermediary when we are deriving additional features in the previous step. In that sense, placing drop feature as the last step allows me to clean up the data set before visualistions. however if the original data set is huge. it might be a good idea to drop columns directly after filtering.\n\n\nWe had already checked the features earlier that there are some features that we do not expect to be using. we will now remove them\n\n\nShow the code\nFiltered_2022_345rm <- Filtered_2022_345rm %>%\n  select(month, town, storey_range, flat_type, resale_price, priceK, price_psm)\n\n\n\n\nCheck for NA values\nLastly, we will now do a sanity check for NA values.\n\n\nShow the code\ncolSums(is.na(Filtered_2022_345rm))\n\n\n       month         town storey_range    flat_type resale_price       priceK \n           0            0            0            0            0            0 \n   price_psm \n           0 \n\n\nGood! there are no NA values. The data set is now ready for further visualisations!"
  },
  {
    "objectID": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#visualisation-of-data",
    "href": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#visualisation-of-data",
    "title": "Take Home Exercise 03 - Putting Visual Analytics into Practical Use",
    "section": "Visualisation of data",
    "text": "Visualisation of data\nBefore we get into visualisations proper, a point should be made on visualising data. Visualisation works on the premise that the human mind is wired to quickly identify visual patterns from data that may otherwise escape the untrained eyes. However it is important to ensure that the visualised data is relevant and helpful to the user. We should not be blindly applying every visualisation technique in the book especially when it doesn’t add value to understanding the data. With this in mind, i would be focusing my visualisations on those that help buying decisions and split them into the different flat types (where applicable) to allow a user to easily find what he needs. More thoughts on data visualisation would be discussed in the conclusion.Distribution of prices\nWe will first look at an overview of the Singapore resale market in general before going into details by planning areas.\n\nOverview of Singapore Resale Market\n\nOverview of Transactions by Flat Types\nLet’s first take a look at the resale transactions of 3, 4, 5 room flats in proportion to each other\n\n\nShow the code\npie345  <- Filtered_2022_345rm %>%\n  group_by(flat_type) %>%\n  summarise(count = n()) %>%\n  mutate(typepct = round(count/sum(count)*100)) %>%\n  mutate(ypos_p = rev(cumsum(rev(typepct))),\n         pos_p = typepct/2 + lead(ypos_p,1),\n         pos_p = if_else(is.na(pos_p), typepct/2, pos_p))\n# \nggplot(data = pie345, aes(x = \"\", y = typepct, fill = factor(flat_type))) +\n  geom_bar(width = 1, stat = 'identity') +\n  coord_polar(theta='y') +\n  geom_label_repel(data = pie345,\n                   aes(y = pos_p, label = paste0(typepct, \"%\")),\n                   size = 4.5, nudge_x = 1, color = c(1, 1, 1), show.legend = FALSE) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nObservation\n\nThe most of transacted flat type is 4-room flat (46%) followed by 5-Room (28%) then 3-Room (26%). This suggests that for a potential buyer / seller, its probably going to be easier to make a successful transaction for a 4-Room flat.\n\n\n\n\n\n\nDistributions of Resale Prices\nWe first check the distribution of resales prices across the various flat types to determine if mean or median prices would be more indicative\n\n\nShow the code\nggplot(data = Filtered_2022_345rm, \n       aes(x = priceK)) +\n  geom_histogram(bins = 100,            \n                 color=\"black\",\n                 fill=\"#BA55D3\") +\n  theme_minimal()+\n  facet_wrap(~ flat_type, nrow = 3)\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\nThe distribution for prices across all flat types are right skewed. This suggests that outliers are skewing the data and that median price.\nIt is possible to buy a larger flat with the same price of a smaller flat in some cases.\n\n\n\n\nLets also take a look at the violin chart to get a better view of the outliers.\n\n\nShow the code\nggbetweenstats(\n  data = Filtered_2022_345rm,\n  x = flat_type, \n  y = priceK)+\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\nWe can see that there’s quite a bit of outliers with extremely high resale prices. from the skew and the outliers , we conclude that it would be a better idea to use median price. moving ahead, the rest of this documentation will use median price wherever aggregation is necessary.\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIn general, outliers should not be removed unless it is erroneous data. Arbitually removing outliers because it didn’t fit the analyst’s perceptions on how the data should be is actually biasness. There are still exceptions where it makes sense to remove non-erroneous outliers, however that would not be discussed here.\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe decision on whether to use average or median is actually not as clear cut as i stated above. if the above holds true, that would mean we should usually use median most of the time as most real life data are not normally distributed.\nInstead the decision on which to use should depend on the contextual business case. In our property price example, the prices could range from 0 to infinity, it would hence be reasonable to assume that the data has the potential to consist of very extreme outliers with extremely high prices. Hence median price would be more indicative of the kind of price most ppl are likely to pay for a unit. However the “average” price is more common understood by the layman. this is why even though median prices are more indicative, property agents still frequently use average prices in conjunction with median prices. for our purpose of analysing the data, we would stick to median as it better represents the data.\n\n\n\n\nMedian Price Trend within 2022\nWe now take a look at the price trends of all three types of flats within the year 2022.\n\n\nShow the code\n# Group data by flat type\nFiltered_2022_345rm_grouped <- Filtered_2022_345rm %>%\n  group_by(flat_type,month) %>%\n  summarise(priceK = median(priceK))\n\n# Plot monthly trend by flat type\np <-ggplot(Filtered_2022_345rm_grouped,aes(x=month, y= priceK,color = flat_type))+\n  geom_line()+\n  scale_x_date(date_labels = \"%b\",date_breaks = \"1 months\")+\n  labs(x = \"Month\", y =  \"Median Resale Price (SGD, thousands)\", title =  \"Median Resale Price by Flat Type (2022)\")+\n  theme_minimal()\n\nggplotly(p, tooltip = c(\"month\", \"priceK\"))\n\n\n\n\n\n\n\n\n\n\n\n\nObservations:\n\nThere is a slight trend of increasing prices across all 3 flat types within the year 2022\n\n\n\n\n\n\n\nSingapore Resale Prices by Planning Areas\nEarlier, we had an overview of the Singapore Resale Market. that gives users an idea of the supply and demand of the flats in general, as well as median prices. however a buyer would also be interested in data for specific planning areas. so let’s dive into more details for the data.\n\nTransactions by Planning Areas\nFirst, lets take a look at supply again, but by Planing areas. A pie chart would not be suitable here, given the number of planning areas. So let’s look at the data with a Proportional Stacked Bar chart and a lollipop plot\nA Proportional stacked bar chart is used for the overview as it is better able to show the proportion of 3, 4, 5 room flats within each planning area. Proportional was chosen as some planning areas with low resale volumes like bukit timah could not be seen on the normal stacked bar chart\nNext the respective 3, 4, 5 rooms transactions are shown with lollipop charts as they are better able to show the difference in number of transactions compared between planning areas.\n\nOverview3-Room4-Room5-Room\n\n\n\n\nShow the code\nggplot(Filtered_2022_345rm, aes(y=town, fill = flat_type))+\n  geom_bar(position = \"fill\")+\n    scale_fill_viridis_d(option = \"D\") +\n  theme_minimal() +\n  labs(title = \"Flat type transaction\", fill = \"Flat type\",\n       x = \"\", y = \"\")\n\n\n\n\n\n\n\n\n\nShow the code\nFiltered_2022_345rm_grouped2 <- Filtered_2022_345rm %>%\n  filter(flat_type %in% c(\"3 ROOM\")) %>%\n  group_by(town) %>%\n  summarise(count = n())\n\np2 <- ggplot(data = Filtered_2022_345rm_grouped2, aes(x=town,y=count)) +\n  geom_point(colour = \"red\") +\n  geom_segment( aes(x=town, xend=town, y=0, yend=count))+\n  labs(title = \"No of Transactions\", y = \"\", x=\"Planning Areas\") +\n  theme_minimal() +\n  coord_flip() +\n  theme(\n    panel.grid.major.y = element_blank(),\n    panel.border = element_blank(),\n    axis.ticks.y = element_blank()\n  )\n\nggplotly(p2)\n\n\n\n\n\n\n\n\n\n\nShow the code\nFiltered_2022_345rm_grouped2 <- Filtered_2022_345rm %>%\n  filter(flat_type %in% c(\"4 ROOM\")) %>%\n  group_by(town) %>%\n  summarise(count = n())\n\np2 <- ggplot(data = Filtered_2022_345rm_grouped2, aes(x=town,y=count)) +\n  geom_point(colour = \"red\") +\n  geom_segment( aes(x=town, xend=town, y=0, yend=count))+\n  labs(title = \"No of Transactions\", y = \"\", x=\"Planning Areas\") +\n  theme_minimal() +\n  coord_flip() +\n  theme(\n    panel.grid.major.y = element_blank(),\n    panel.border = element_blank(),\n    axis.ticks.y = element_blank()\n  )\n\nggplotly(p2)\n\n\n\n\n\n\n\n\n\n\nShow the code\nFiltered_2022_345rm_grouped2 <- Filtered_2022_345rm %>%\n  filter(flat_type %in% c(\"5 ROOM\")) %>%\n  group_by(town) %>%\n  summarise(count = n())\n\np2 <- ggplot(data = Filtered_2022_345rm_grouped2, aes(x=town,y=count)) +\n  geom_point(colour = \"red\") +\n  geom_segment( aes(x=town, xend=town, y=0, yend=count))+\n  labs(title = \"No of Transactions\", y = \"\", x=\"Planning Areas\") +\n  theme_minimal() +\n  coord_flip() +\n  theme(\n    panel.grid.major.y = element_blank(),\n    panel.border = element_blank(),\n    axis.ticks.y = element_blank()\n  )\n\nggplotly(p2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\nBedok, Ang Mo Kio, Yishun has a high number of 3-room flat transactions, worth noting that these are usually older areas\nSengkang and Punggol have a high number of 4 and 5-room flat transactions. They are also the newer areas\nBukit Timah has the lowest transactions across all flat types.\n\n\n\n\n\n\nPrice Range by planning areas\nA buyer would also be interested in the kind of price range that he could be expected to pay for a unit. for this, we would untilise another form of lillipop chart called the dumbell chart.\nA dumbbell chart visually indicates the min and max prices of units for a given feature or category. in this case we are using it to show by planning areas.\n\nOverview3-Room4-Room5-Room\n\n\n\n\nShow the code\nFiltered_2022_345rmRange <- Filtered_2022_345rm %>%\n  group_by(town) %>%\n  summarise(min_price = min(priceK),\n            max_price = max(priceK))\n\np3 <- plot_ly(Filtered_2022_345rmRange) %>% \n  add_segments(x = ~min_price, xend = ~max_price, y = ~town, yend = ~town, showlegend = FALSE) %>%\n  add_markers(x = ~min_price, y = ~town, name = \"Min\", color = I(\"#e66819\")) %>%\n  add_markers(x = ~max_price, y = ~town, name = \"Max\", color = I(\"#bf0d31\")) %>%\n  layout(\n    title = \"Resale Price Range Aross Planning Areas (SGD, Thousands)\",\n    xaxis = list(title = \"Resale Price (SGD, thousands)\"),\n    yaxis = list(title = \"Planning Area\"),\n    margin = list(l = 70)\n  )\n\np3\n\n\n\n\n\n\n\n\n\n\nShow the code\nFiltered_2022_345rmRange <- Filtered_2022_345rm %>%\n  filter(flat_type %in% c(\"3 ROOM\")) %>%\n  group_by(town) %>%\n  summarise(min_price = min(priceK),\n            max_price = max(priceK))\n\np3 <- plot_ly(Filtered_2022_345rmRange) %>% \n  add_segments(x = ~min_price, xend = ~max_price, y = ~town, yend = ~town, showlegend = FALSE) %>%\n  add_markers(x = ~min_price, y = ~town, name = \"Min\", color = I(\"#e66819\")) %>%\n  add_markers(x = ~max_price, y = ~town, name = \"Max\", color = I(\"#bf0d31\")) %>%\n  layout(\n    title = \"Resale Price Range Aross Planning Areas (SGD, Thousands)\",\n    xaxis = list(title = \"Resale Price (SGD, thousands)\"),\n    yaxis = list(title = \"Planning Area\"),\n    margin = list(l = 70)\n  )\n\np3\n\n\n\n\n\n\n\n\n\n\nShow the code\nFiltered_2022_345rmRange <- Filtered_2022_345rm %>%\n  filter(flat_type %in% c(\"4 ROOM\")) %>%\n  group_by(town) %>%\n  summarise(min_price = min(priceK),\n            max_price = max(priceK))\n\np3 <- plot_ly(Filtered_2022_345rmRange) %>% \n  add_segments(x = ~min_price, xend = ~max_price, y = ~town, yend = ~town, showlegend = FALSE) %>%\n  add_markers(x = ~min_price, y = ~town, name = \"Min\", color = I(\"#e66819\")) %>%\n  add_markers(x = ~max_price, y = ~town, name = \"Max\", color = I(\"#bf0d31\")) %>%\n  layout(\n    title = \"Resale Price Range Aross Planning Areas (SGD, Thousands)\",\n    xaxis = list(title = \"Resale Price (SGD, thousands)\"),\n    yaxis = list(title = \"Planning Area\"),\n    margin = list(l = 70)\n  )\n\np3\n\n\n\n\n\n\n\n\n\n\nShow the code\nFiltered_2022_345rmRange <- Filtered_2022_345rm %>%\n  filter(flat_type %in% c(\"5 ROOM\")) %>%\n  group_by(town) %>%\n  summarise(min_price = min(priceK),\n            max_price = max(priceK))\n\np3 <- plot_ly(Filtered_2022_345rmRange) %>% \n  add_segments(x = ~min_price, xend = ~max_price, y = ~town, yend = ~town, showlegend = FALSE) %>%\n  add_markers(x = ~min_price, y = ~town, name = \"Min\", color = I(\"#e66819\")) %>%\n  add_markers(x = ~max_price, y = ~town, name = \"Max\", color = I(\"#bf0d31\")) %>%\n  layout(\n    title = \"Resale Price Range Aross Planning Areas (SGD, Thousands)\",\n    xaxis = list(title = \"Resale Price (SGD, thousands)\"),\n    yaxis = list(title = \"Planning Area\"),\n    margin = list(l = 70)\n  )\n\np3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\nSengkang has a much narrower price range despite having one of the most transactions int he area.\nIn general, 4-room flats have a wider price range\n\n\n\n\n\n\nMedian Resale Price by Storey Range\nLastly, we know that the storey of a unit also have an impact on the resale price of the unit. But it still differs by\n\nOverview3-Room4-Room5-Room\n\n\n\n\nShow the code\nFiltered_2022_345rmStorey <- Filtered_2022_345rm %>%\n  group_by(town,storey_range) %>%\n  summarise(medianpriceK = median(priceK))\n\ntooltip_p4 <-  paste(\"Town:\", Filtered_2022_345rmStorey$town,\n                      \"\\nStorey: \" , Filtered_2022_345rmStorey$storey_range,\n                      \"\\nMedian Price: \",Filtered_2022_345rmStorey$medianpriceK,\"K\")\n\n\np4 <- ggplot(data = Filtered_2022_345rmStorey, aes(x = town, y = storey_range, fill = medianpriceK)) +\n  geom_tile_interactive(tooltip = tooltip_p4) +\n  scale_fill_gradient(low = \"#ECE2F0\", high = \"#6A51A3\") +\n  labs(title = \"Median Resale Price against Storey Range in Different Towns, 2022 Singapore\", \n       x = \"Residential Town\", \n       y = \"Storey Range\") +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\ngirafe(\n  ggobj = p4,\n  width_svg = 10,\n  height_svg = 10 * 0.618\n)\n\n\n\n\n\n\n\n\n\n\nShow the code\nFiltered_2022_345rmStorey <- Filtered_2022_345rm %>%\n  filter(flat_type %in% c(\"3 ROOM\")) %>%\n  group_by(town,storey_range) %>%\n  summarise(medianpriceK = median(priceK))\n\ntooltip_p4 <-  paste(\"Town:\", Filtered_2022_345rmStorey$town,\n                      \"\\nStorey: \" , Filtered_2022_345rmStorey$storey_range,\n                      \"\\nMedian Price: \",Filtered_2022_345rmStorey$medianpriceK,\"K\")\n\n\np4 <- ggplot(data = Filtered_2022_345rmStorey, aes(x = town, y = storey_range, fill = medianpriceK)) +\n  geom_tile_interactive(tooltip = tooltip_p4) +\n  scale_fill_gradient(low = \"#ECE2F0\", high = \"#6A51A3\") +\n  labs(title = \"Median Resale Price against Storey Range in Different Towns, 2022 Singapore\", \n       x = \"Residential Town\", \n       y = \"Storey Range\") +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\ngirafe(\n  ggobj = p4,\n  width_svg = 10,\n  height_svg = 10 * 0.618\n)\n\n\n\n\n\n\n\n\n\n\nShow the code\nFiltered_2022_345rmStorey <- Filtered_2022_345rm %>%\n  filter(flat_type %in% c(\"4 ROOM\")) %>%\n  group_by(town,storey_range) %>%\n  summarise(medianpriceK = median(priceK))\n\ntooltip_p4 <-  paste(\"Town:\", Filtered_2022_345rmStorey$town,\n                      \"\\nStorey: \" , Filtered_2022_345rmStorey$storey_range,\n                      \"\\nMedian Price: \",Filtered_2022_345rmStorey$medianpriceK,\"K\")\n\n\np4 <- ggplot(data = Filtered_2022_345rmStorey, aes(x = town, y = storey_range, fill = medianpriceK)) +\n  geom_tile_interactive(tooltip = tooltip_p4) +\n  scale_fill_gradient(low = \"#ECE2F0\", high = \"#6A51A3\") +\n  labs(title = \"Median Resale Price against Storey Range in Different Towns, 2022 Singapore\", \n       x = \"Residential Town\", \n       y = \"Storey Range\") +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\ngirafe(\n  ggobj = p4,\n  width_svg = 10,\n  height_svg = 10 * 0.618\n)\n\n\n\n\n\n\n\n\n\n\nShow the code\nFiltered_2022_345rmStorey <- Filtered_2022_345rm %>%\n  filter(flat_type %in% c(\"5 ROOM\")) %>%\n  group_by(town,storey_range) %>%\n  summarise(medianpriceK = median(priceK))\n\ntooltip_p4 <-  paste(\"Town:\", Filtered_2022_345rmStorey$town,\n                      \"\\nStorey: \" , Filtered_2022_345rmStorey$storey_range,\n                      \"\\nMedian Price: \",Filtered_2022_345rmStorey$medianpriceK,\"K\")\n\n\np4 <- ggplot(data = Filtered_2022_345rmStorey, aes(x = town, y = storey_range, fill = medianpriceK)) +\n  geom_tile_interactive(tooltip = tooltip_p4) +\n  scale_fill_gradient(low = \"#ECE2F0\", high = \"#6A51A3\") +\n  labs(title = \"Median Resale Price against Storey Range in Different Towns, 2022 Singapore\", \n       x = \"Residential Town\", \n       y = \"Storey Range\") +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\ngirafe(\n  ggobj = p4,\n  width_svg = 10,\n  height_svg = 10 * 0.618\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\nIn general the prices increase as the storey range goes up.\nIt looks like the prices increases are generally gradual up to 9 storey, but starts to scale up very fast after that. this applies to all areas."
  },
  {
    "objectID": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#conclusion",
    "href": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#conclusion",
    "title": "Take Home Exercise 03 - Putting Visual Analytics into Practical Use",
    "section": "Conclusion",
    "text": "Conclusion\nIn terms of data visualisations, complicated plots are not always the right answer, what is more important is to understand the business question and identify what is relevant before determining what are the possible ways to visualise the data for more insights.\nSome other plots that were considered but not used were , Treemap as well as correleation plots for price to storey range and price to total square metre.\nTreemap would had been able to show some price difference between different planning districts, but it seemed to be to be the wrong use of it. It was originally intended to visualise Tree structured node links and provide a quick way to quickly identify large contributers to common theme. in the case of the resale prices, there are not contributing to a common theme, just showing differences\nPrice to storey range are not plotted for correleation because It is already a known fact that the HDB valuer will add a certain amount to the valudation for each additional storey.\nPrice to total square metre was also not plotted for correlation. By design, HDB 3, 4 and 5 rooms flats are already assigned certain size parameters for building. A 5 room flat would be larger than a 4 room flat and priced higher, same for 4 room to 3 room. So testing for correlation between resale price and total square area would always be positive. meaning larger space equates to higher price.\nWhat would had been relevant but was not visualised in this exercise was to show the prices in a geographically layout becasue people also have preferences for staying in certain areas. e.g. North, Central, West. I tested geofacet, but wasn’t able to get it to display correctly in quarto."
  },
  {
    "objectID": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#references",
    "href": "TakeHomeEx/TakeHomeEx03/TakeHomeEx03.html#references",
    "title": "Take Home Exercise 03 - Putting Visual Analytics into Practical Use",
    "section": "References",
    "text": "References\nhttps://datavizpyr.com/violinplot-vs-boxplot-when-violinplot-can-be-more-useful/\nhttps://isss608-tasapornv.netlify.app/take-home_ex/take-home_ex03/take-home_ex03\nhttps://www.valuechampion.sg/average-cost-housing-singapore\nhttps://towardsdatascience.com/mean-or-median-choose-based-on-the-decision-not-the-distribution-f951215c1376"
  }
]