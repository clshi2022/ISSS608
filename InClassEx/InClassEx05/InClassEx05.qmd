---
title: "In Class Exercise 05"
editor: visual
format:
  html:
    code-fold: true
    code-summary: "Show the code"
    warning: false
    message: false
author: "Shi Chee Liang"
date: 11 February 2023
date-modified: "`r Sys.Date()`"
---

## Loading Packages

```{r}
pacman::p_load(corrplot, ggstatsplot, plotly, seriation, dendextend, heatmaply, tidyverse)
```

## Visualising Correlation Matrix

### Importing Data Set

```{r}
wine <- read_csv("data/wine_quality.csv")
```

### Building correlation matrix (basic)

```{r}

pairs(wine[,1:11])
```

### Building correlation matrix (ggcormat)

```{r}
ggstatsplot::ggcorrmat(
  data = wine, 
  cor.vars = 1:11)
```

### Building correlation matrix (corrplot)

```{r}
wine.cor <- cor(wine[, 1:11])

corrplot(wine.cor)
```

## Visualising Tenary Plots

::: callout-warning
The tenary package currently conflicts with ggstatsplot
:::

### Importing Data Set

```{r}
# pop_data <- read_csv("data/respopagsex2000to2018_tidy.csv") 
```

### Preparing the data

```{r}
# agpop_mutated <- pop_data %>%
#   mutate(`Year` = as.character(Year))%>%
#   spread(AG, Population) %>%
#   mutate(YOUNG = rowSums(.[4:8]))%>%
#   mutate(ACTIVE = rowSums(.[9:16]))  %>%
#   mutate(OLD = rowSums(.[17:21])) %>%
#   mutate(TOTAL = rowSums(.[22:24])) %>%
#   filter(Year == 2018)%>%
#   filter(TOTAL > 0)
```

### **Plotting a static ternary diagram**

```{r}
# ggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +
#   geom_point()
```

Adding some visual elements to the tenary diagrams

```{r}
# ggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +
#   geom_point() +
#   labs(title="Population structure, 2015") +
#   theme_rgbw()
```

### Plotting an Interactive tenary Diagram

```{r}
# label <- function(txt) {
#   list(
#     text = txt, 
#     x = 0.1, y = 1,
#     ax = 0, ay = 0,
#     xref = "paper", yref = "paper", 
#     align = "center",
#     font = list(family = "serif", size = 15, color = "white"),
#     bgcolor = "#b3b3b3", bordercolor = "black", borderwidth = 2
#   )
# }
# 
# axis <- function(txt) {
#   list(
#     title = txt, tickformat = ".0%", tickfont = list(size = 10)
#   )
# }
# 
# ternaryAxes <- list(
#   aaxis = axis("Young"), 
#   baxis = axis("Active"), 
#   caxis = axis("Old")
# )
# 
# plot_ly(
#   agpop_mutated, 
#   a = ~YOUNG, 
#   b = ~ACTIVE, 
#   c = ~OLD, 
#   color = I("black"), 
#   type = "scatterternary"
# ) %>%
#   layout(
#     annotations = label("Ternary Markers"), 
#     ternary = ternaryAxes
#   )
```

## Visualising Heat Maps

### Importing the data

```{r}
wh <- read_csv("data/WHData-2018.csv")
```

### Preparing the data

this code sets the country names as the index. it is needed because heatmaps uses the index to display the rows and columns

```{r}
row.names(wh) <- wh$Country
```

### Transforming into  matrix

seems like heatmaps require data in matrix

```{r}
wh1 <- dplyr::select(wh, c(3, 7:12))
wh_matrix <- data.matrix(wh)
```

Building the basic Heatmap

```{r}
wh_heatmap <- heatmap(wh_matrix,
                      Rowv=NA, Colv=NA)
```

Building Heatmap using heatmaply

```{r}
heatmaply(wh_matrix)
```
